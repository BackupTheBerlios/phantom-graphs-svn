//*******************************************************************************
/// @file	Node.h
/// @author	Katharina Greiner, Matr.-Nr. 943471
/// @date	Erstellt am		30.12.2005
/// @date	Letzte Änderung	28.01.2006
//*******************************************************************************

// Änderungen:
// 03.01.06		- Methode translate() hinzugefügt
// 08.01.06		- Attribute m_Width und m_Height und entsprechende Getter und Setter
//				  hinzugefügt
// 27.01.06		- Incoming- und Outgoing Edges und dazugehörige Methoden hinzugefügt.
// 28.01.06		- Membervariable m_rUnitInfo zur Einheitenkonvertierung hinzugefügt,
//				  Konstruktor entsprechend angepasst.


#ifndef _NODE_H_
#define _NODE_H_

// wird von gl.h benötigt
#include <windows.h>

// OpenGL includes
#include <GL/gl.h>

// STL Includes
#include <list>

#include "HapticObject.h"
#include "Edge.h"
#include "Utilities.h"
#include "HapticEffect.h"
#include "../businesslogic/IObserver.h"
#include "../businesslogic/IBusinessAdapter.h"


using std::list;

//...............................................................................
/// @author	Katharina Greiner, Matr.-Nr. 943471
///
///	@brief	Haptisches Objekt, das einen Knoten in einem Graphen darstellt.
//...............................................................................
class Node : public HapticObject, public IObserver
{
	protected:	
	
		//.......................................................................
		/// @brief
		//.......................................................................
		float m_Width;
		
		//.......................................................................
		/// @brief
		//.......................................................................
		float m_Height;

		//.......................................................................
		/// @brief
		//.......................................................................
		IBusinessAdapter * m_pBusinessObject;

		//.......................................................................
		/// @brief
		//.......................................................................
		UnitConversionInfo & m_rUnitInfo;

		//.......................................................................
		/// @brief
		//.......................................................................
		HapticEffect * m_pHardToMoveEffect;

		//.......................................................................
		/// @brief
		//.......................................................................
		HapticEffect * m_pImpossibleToMoveEffect;

		//.......................................................................
		/// @brief
		//.......................................................................
		list<Edge *> m_IncomingEdges;

		//.......................................................................
		/// @brief
		//.......................................................................
		list<Edge *> m_OutgoingEdges;

		//.......................................................................
		/// @brief
		//.......................................................................
		void updateIncomingEdge(Edge * pEdge);

		//.......................................................................
		/// @brief
		//.......................................................................
		void updateOutgoingEdge(Edge * pEdge);

		//.......................................................................
		/// @brief
		//.......................................................................
		void updateEdges();

		//.......................................................................
		/// @brief	ID der OpenGL-Displayliste, mit der der Node gezeichnet wird.
		//.......................................................................
		GLuint m_DisplayList;

		//.......................................................................
		//.......................................................................
//		Texture* m_Texture;

		//.......................................................................
		/// @brief	Gibt die Displayliste frei und weist ihr einen ungültigen Wert zu.
		//.......................................................................
		void releaseDisplayList();

	public:	

		//.......................................................................
		//.......................................................................
		Node( IBusinessAdapter * businessObj, UnitConversionInfo & unitInfo );

		//.......................................................................
		//.......................................................................
		virtual ~Node();

		//.......................................................................
		/// @brief
		//.......................................................................
		void setWidth( float value );
	
		//.......................................................................
		/// @brief
		//.......................................................................
		void setHeight( float value );
		
		//.......................................................................
		/// @brief
		//.......................................................................
		float getWidth();
		
		//.......................................................................
		/// @brief
		//.......................................................................
		float getHeight();

		//.......................................................................
		/// @brief
		//.......................................................................
		void setImpossibleToMoveEffect( HapticEffect* value );
	
		//.......................................................................
		/// @brief
		//.......................................................................
		void setHardToMoveEffect( HapticEffect* value );

		//.......................................................................
		/// @brief	Fügt dem Knoten eine eingehende Kante hinzu.
		/// @param	pEdge	Kante, die dem Knoten hinzugefügt werden soll.
		///					Die Kante wird beim Löschen des Knotens nicht freigegeben!
		//.......................................................................
		void addIncomingEdge( Edge * pEdge );

		//.......................................................................
		/// @brief	Fügt dem Knoten eine ausgehende Kante hinzu.
		/// @param	pEdge	Kante, die dem Knoten hinzugefügt werden soll.
		///					Die Kante wird beim Löschen des Knotens nicht freigegeben!
		//.......................................................................
		void addOutgoingEdge( Edge * pEdge );
		
		//.......................................................................
		//.......................................................................
//		void setTexture( const Texture* value );

		//=======================================================================
		// Von HapticObject geerbte Methoden
		//=======================================================================

		//.......................................................................
		/// @brief	Legt die Geometrie aller Objekte dieser Klasse fest.
		//.......................................................................
		virtual void renderShape();

		//.......................................................................
		//.......................................................................
		virtual void translate(const double x, const double y, const double z);

		//.......................................................................
		/// @brief	Platziert das Objekt an der Stelle mit dem Ortsvektor (x, y, z).
		///	@param	x	x-Koordinate des Ortsvektors.
		///	@param	y	y-Koordinate des Ortsvektors.
		///	@param	z	z-Koordinate des Ortsvektors.
		//.......................................................................
		virtual void setPosition(const double x, const double y, const double z);

		//=======================================================================


		//=======================================================================
		// Von IObserver geerbte Methoden
		//=======================================================================

		//.......................................................................
		/// @brief	Veranlasst den Observer, sich die benötigten Informationen 
		///			vom Observable zu holen.
		//.......................................................................
		virtual void Update( Observable * pObservable );

		//=======================================================================
		
};

#endif // _NODE_H_