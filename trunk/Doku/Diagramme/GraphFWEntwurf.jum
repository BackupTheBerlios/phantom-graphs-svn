Jumli
{
  *** Applikation ***;
  Version=1.4;
  Elements=159;
  {
    *** Model ***;
    Typ=2;
    MainFile="main.cpp";
    ActiveDiagramm=16;
    {
      *** GenSettings ***;
      GetPrefix="Get";
      SetPrefix="Set";
      DBBaseClass="DbBasisObject";
      DBRecordSet="DbSet";
      GenerateWrite=true;
      GenerateRead=true;
    };
    {
      *** CompileDebugSettings ***;
      AufrufCompiler="g++";
      AufrufDebugger="gdb";
      DebugOptionen="-nw";
    };
    {
      *** Package ***;
      Name="UseCases";
      ID=3;
      Zugriff=2;
      Type=2;
      {
        *** Diagramm ***;
        Name="UseCases";
        ID=4;
        DiagrammTyp=2;
        {
          *** UseCaseZeichner ***;
          Rechteck=375,198,434,237;
          Order=-1;
          UMLElementID=5;
        };
        {
          *** UseCaseZeichner ***;
          Rechteck=376,309,435,348;
          Order=-1;
          UMLElementID=6;
        };
        {
          *** UseCaseZeichner ***;
          Rechteck=376,428,435,467;
          Order=-1;
          UMLElementID=7;
        };
        {
          *** ActorZeichner ***;
          Rechteck=93,290,132,349;
          Order=-1;
          UMLElementID=8;
        };
        {
          *** ActorZeichner ***;
          Rechteck=695,427,734,486;
          Order=-1;
          UMLElementID=12;
        };
        {
          *** SystemZeichner ***;
          Rechteck=213,127,609,598;
          Order=-1;
          UMLElementID=14;
        };
        {
          *** BeziehungZeichner ***;
          Rechteck=252,325,259,332;
          Order=-1;
          UMLElementID=9;
          TextOffset=0,5;
        };
        {
          *** BeziehungZeichner ***;
          Order=-1;
          UMLElementID=10;
          TextOffset=0,5;
        };
        {
          *** BeziehungZeichner ***;
          Rechteck=540,456,547,463;
          Order=-1;
          UMLElementID=13;
          TextOffset=0,5;
        };
        {
          *** BeziehungZeichner ***;
          Order=-1;
          UMLElementID=11;
          TextOffset=0,5;
        };
      };
      {
        *** UseCase ***;
        Doku="Wird vom Layout Designer gestartet indem mit dem \nPhantom einer \
        oder mehrere Knoten markiert werden. \nSpießt der Layout Designer nun einen \
        der markierten \nKnoten auf, kann er an dem markierten Teilgraphen \nziehen. \
        Wendet er genügend Kraft an, wird der Teilgraph \naus dem ursprünglichen \
        Graphen gelöst.";
        Name="Teilgraph lösen";
        ID=5;
        Zugriff=2;
      };
      {
        *** UseCase ***;
        Doku="Der Layout Designer startet den Use Case indem er einen \nKnoten \
        mit dem Phantom aufspießt. Er kann den Knoten \nnun auf einem durch Constraints \
        vorgegebenen Gitter \nverschieben. Wie leicht sich der Knoten verschieben \
        \nlässt, hängt davon ab, wie eng der Knoten mit seinen \nNachbarn verbunden \
        ist. Das Verschieben eines Knotens \nwird beendet, wenn der Layout Designer \
        den Knoten mit \ndem Phantom wieder loslässt.";
        Name="Knoten verschieben";
        ID=6;
        Zugriff=2;
      };
      {
        *** UseCase ***;
        Doku="Der Betrachter startet den Use Case, indem er einen \nStartknoten \
        und einen Zielknoten auswählt und dann im \nMenü \"Kantenzug\" anklickt. \
        Das System setzt das \nPhantom an den Startknoten. Für Kanten, die zum \
        \nZielknoten führen, werden Constraints aktiviert, damit der\nBetrachter \
        zum Ziel geleitet wird. Der Use Case ist beendet,\nwenn das Phantom am \
        Zielknoten angekommen ist.";
        Name="Kantenzug";
        ID=7;
        Zugriff=2;
      };
      {
        *** Actor ***;
        Name="LayoutDesigner";
        ID=8;
        Zugriff=2;
        {
          *** Beziehung ***;
          ID=9;
          Zugriff=2;
          A=8;
          B=6;
        };
        {
          *** Beziehung ***;
          ID=10;
          Zugriff=2;
          A=8;
          B=5;
        };
        {
          *** Beziehung ***;
          ID=11;
          Zugriff=2;
          A=8;
          B=7;
        };
      };
      {
        *** Actor ***;
        Name="Betrachter";
        ID=12;
        Zugriff=2;
        {
          *** Beziehung ***;
          ID=13;
          Zugriff=2;
          A=12;
          B=7;
        };
      };
      {
        *** System ***;
        Name="HapticGraphFrameWork";
        ID=14;
      };
    };
    {
      *** Package ***;
      Name="GraphFWEntwurf";
      ID=15;
      Zugriff=2;
      {
        *** Diagramm ***;
        Name="GraphFWEntwurf";
        ID=16;
        {
          *** CJumliTracker ***;
          Rechteck=252,261,510,518;
          Order=-1;
          UMLElementID=113;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=740,394,898,464;
          Order=-1;
          UMLElementID=138;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=740,484,898,554;
          Order=-1;
          UMLElementID=145;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=734,578,898,665;
          Order=-1;
          UMLElementID=140;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=163,605,294,664;
          Order=-1;
          UMLElementID=147;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=320,605,425,664;
          Order=-1;
          UMLElementID=84;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=334,41,563,162;
          Order=-1;
          UMLElementID=107;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=448,605,553,664;
          Order=-1;
          UMLElementID=93;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=725,38,854,176;
          Order=-1;
          UMLElementID=104;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=41,297,146,401;
          Order=-1;
          UMLElementID=152;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=719,231,898,369;
          Order=-1;
          UMLElementID=95;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=29,754,134,813;
          Order=-1;
          UMLElementID=156;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=58,51,204,138;
          Order=-1;
          UMLElementID=86;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=829,735,1072,924;
          Order=-1;
          UMLElementID=52;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** VererbungZeichner ***;
          Rechteck=267,599,274,606;
          Order=-1;
          UMLElementID=151;
          Knick=271,603;
          TextOffset=0,5;
          {
            *** Linie ***;
            Punkt=271,603;
          };
        };
        {
          *** VererbungZeichner ***;
          Rechteck=367,553,374,560;
          Order=-1;
          UMLElementID=85;
          TextOffset=0,5;
        };
        {
          *** VererbungZeichner ***;
          Rechteck=471,565,478,572;
          Order=-1;
          UMLElementID=94;
          Knick=475,569;
          TextOffset=0,5;
          {
            *** Linie ***;
            Punkt=475,569;
          };
        };
        {
          *** VererbungZeichner ***;
          Rechteck=865,700,872,707;
          Order=-1;
          UMLElementID=83;
          TextOffset=0,5;
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=553,402,560,409;
          Order=-1;
          UMLElementID=133;
          Knick=542,398;
          TextOffset=0,5;
          OffsetRollenName=-52,-18;
          OffsetA=5,5;
          OffsetB=-3,3;
          {
            *** Linie ***;
            Punkt=542,398;
          };
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=519,473,529,490;
          Order=-1;
          UMLElementID=134;
          Knick=511,491;
          TextOffset=0,5;
          OffsetRollenName=-45,-19;
          OffsetA=5,5;
          OffsetB=-1,-31;
          {
            *** Linie ***;
            Punkt=511,491;
          };
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=530,517,540,534;
          Order=-1;
          UMLElementID=135;
          Knick=515,518;
          TextOffset=0,5;
          OffsetRollenName=-37,-18;
          OffsetA=5,5;
          OffsetB=6,-4;
          {
            *** Linie ***;
            Punkt=515,518;
          };
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=153,311,221,328;
          Order=-1;
          UMLElementID=136;
          Knick=213,331;
          TextOffset=0,5;
          OffsetRollenName=6,-18;
          OffsetA=5,5;
          OffsetB=5,5;
          {
            *** Linie ***;
            Punkt=213,331;
          };
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=617,286,733,303;
          Order=-1;
          UMLElementID=137;
          Knick=515,307;
          TextOffset=0,5;
          OffsetRollenName=-38,-19;
          OffsetA=5,5;
          OffsetB=5,-1;
          {
            *** Linie ***;
            Punkt=515,307;
          };
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=65,715,131,732;
          Order=-1;
          UMLElementID=150;
          TextOffset=0,5;
          OffsetRollenName=-37,-13;
          OffsetA=5,5;
          OffsetB=5,5;
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=259,222,375,239;
          Order=-1;
          UMLElementID=92;
          TextOffset=0,5;
          OffsetRollenName=69,-11;
          OffsetA=-10,2;
          OffsetB=5,5;
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=482,551,558,568;
          Order=-1;
          UMLElementID=82;
          Knick=626,656;
          TextOffset=0,5;
          OffsetRollenName=-2,9;
          OffsetA=5,5;
          OffsetB=5,5;
          {
            *** Linie ***;
            Punkt=626,656;
          };
        };
      };
      {
        *** Package ***;
        Name="genSource";
        ID=17;
        Zugriff=2;
        {
          *** Diagramm ***;
          Name="genSource";
          ID=18;
          {
            *** CJumliTracker ***;
            Rechteck=-2,25,241,214;
            Order=-1;
            UMLElementID=19;
            IsWithAttributs=true;
            IsWithMethods=true;
            IsHideTaggedValue=true;
          };
        };
        {
          *** Klasse ***;
          Doku=".............................................................................../ \
          @brief\tEine Eventhandlerklasse die es ermöglicht, haptische Objekte mit \
          dem /\t\t\tPhantom zu bewegen/\t\t\t/\t\t\tDer Eventhandler reagiert auf \
          die folgende Events:/\t\t\t- der vordere Phantom-Button wird gedrückt, \
          wenn ein Objekt mit dem /\t\t\t  Phantom berührt wird/\t\t\t- das Phantom \
          wird mit gedrücktem Button bewegt/\t\t\t- der vordere Phantom-Button wird \
          losgelassen/\t\t\tWirkung: Solange der Button gedrückt gehalten wird, folgt \
          das /\t\t\tregistrierte Objekt der Bewegung des Phantom/ @todo\tObjekte \
          lassen sich noch nicht nach hinten verschieben...............................................................................";
          Name="DragObjectHandler";
          ID=19;
          Datentyp="class";
          Zugriff=3;
          KomponentenId=-1;
          FileName="genSource\\DragObjectHandler.cpp";
          FileActiveLine=-1;
          HeaderFileName="genSource\\DragObjectHandler.h";
          HeaderFileActiveLine=-1;
          Parent=-1;
          {
            *** Attribut ***;
            Doku="......................................................................./ \
            Position des Proxy beim letzten Aufruf des Draghandlers/ Dient zur Berechnung \
            des Vektors um den das Objekt verschoben werden soll";
            Name="m_LastProxyPos";
            ID=20;
            Datentyp="hduVector3Dd";
            Zugriff=1;
          };
          {
            *** Methode ***;
            Doku="......................................................................./ \
            @brief\tKonstruktor, initialisiert das Eventhandler-Objekt mit dem /\t\t\tzugehörigen \
            haptischen Objekt/ @param\tpObj\tPointer auf das haptische Objekt für das \
            der /\t\t\t\t\tEventhandler zuständig sein soll.......................................................................";
            Name="DragObjectHandler";
            ID=21;
            {
              *** Parameter ***;
              Name="pObj";
              ID=22;
              Typ="HapticObject *";
            };
          };
          {
            *** Methode ***;
            Doku="/ @brief\t(HLAPI-Callbackfunktion) Started das Draggen des Objekts/ \
            @param\tevent\tGibt an, auf welches HLAPI-Event hin die Callback-/\t\t\t\t\tFunktion \
            aufgerufen werden soll, hier HL_EVENT_1BUTTONDOWN/\t@param\tshapeID\tDie \
            ShapeID des Objekts, das bewegt werden soll/ @param\tthread\tGibt an, in \
            welchem HLAPI-Thread das Event behandelt /\t\t\t\t\twerden soll, in diesem \
            Fall HL_CLIENT_THREAD/ @param\tcache\tHLAPI-State Schnappschuss in dem \
            Moment, in dem das Event feuert/ @param\tpHandlerObject\tPointer auf das \
            DragObjectHandler-Objekt, das/\t\t\t\t\tdas Event verarbeiten soll.......................................................................";
            Name="OnButtonDown";
            ID=23;
            IsStatic=true;
            Zugriff=1;
            RueckgabeWert="void HLCALLBACK";
            {
              *** Parameter ***;
              Name="event";
              ID=24;
              Typ="HLenum";
            };
            {
              *** Parameter ***;
              Name="shapeID";
              ID=25;
              Typ="HLuint";
            };
            {
              *** Parameter ***;
              Name="thread";
              ID=26;
              Typ="HLenum";
            };
            {
              *** Parameter ***;
              Name="cache";
              ID=27;
              Typ="HLcache *";
            };
            {
              *** Parameter ***;
              Name="pHandlerObject";
              ID=28;
              Typ="void *";
            };
          };
          {
            *** Methode ***;
            Doku="......................................................................./ \
            @brief\t(HLAPI-Callbackfunktion) Beendet das Draggen des Objekts/ @param\tevent\tGibt \
            an, auf welches HLAPI-Event hin die Callback-/\t\t\t\t\tFunktion aufgerufen \
            werden soll, hier HL_EVENT_1BUTTONUP/\t@param\tshapeID\thier soll HL_OBJECT_ANY \
            angegeben werden/ @param\tthread\tGibt an, in welchem HLAPI-Thread das \
            Event behandelt/\t\t\t\t\t werden soll, in diesem Fall HL_CLIENT_THREAD/ \
            @param\tcache\tHLAPI-State Schnappschuss in dem Moment, in dem das Event \
            feuert/ @param\tuserdata\tWird von dieser Funktion nicht benötigt.......................................................................";
            Name="OnButtonUp";
            ID=29;
            IsStatic=true;
            Zugriff=1;
            RueckgabeWert="void HLCALLBACK";
            {
              *** Parameter ***;
              Name="event";
              ID=30;
              Typ="HLenum";
            };
            {
              *** Parameter ***;
              Name="shapeID";
              ID=31;
              Typ="HLuint";
            };
            {
              *** Parameter ***;
              Name="thread";
              ID=32;
              Typ="HLenum";
            };
            {
              *** Parameter ***;
              Name="cache";
              ID=33;
              Typ="HLcache *";
            };
            {
              *** Parameter ***;
              Name="userdata";
              ID=34;
              Typ="void *";
            };
          };
          {
            *** Methode ***;
            Doku="......................................................................./ \
            @brief\t(HLAPI-Callbackfunktion) Steuert das Draggen des Objekts/ @param\tevent\tGibt \
            an, auf welches HLAPI-Event hin die Callback-/\t\t\t\t\tFunktion aufgerufen \
            werden soll, hier HL_EVENT_MOTION/\t@param\tshapeID\thier soll HL_OBJECT_ANY \
            angegeben werden/ @param\tthread\tGibt an, in welchem HLAPI-Thread das \
            Event behandelt/\t\t\t\t\twerden soll, in diesem Fall HL_CLIENT_THREAD/ \
            @param\tcache\tHLAPI-State Schnappschuss in dem Moment, in dem das Event \
            feuert/ @param\tpHandlerObject\tPointer auf das DragObjectHandler-Objekt, \
            das/\t\t\t\t\t das Event verarbeiten soll.......................................................................";
            Name="OnDrag";
            ID=35;
            IsStatic=true;
            Zugriff=1;
            RueckgabeWert="void HLCALLBACK";
            {
              *** Parameter ***;
              Name="event";
              ID=36;
              Typ="HLenum";
            };
            {
              *** Parameter ***;
              Name="shapeID";
              ID=37;
              Typ="HLuint";
            };
            {
              *** Parameter ***;
              Name="thread";
              ID=38;
              Typ="HLenum";
            };
            {
              *** Parameter ***;
              Name="cache";
              ID=39;
              Typ="HLcache *";
            };
            {
              *** Parameter ***;
              Name="pHandlerObject";
              ID=40;
              Typ="void *";
            };
          };
          {
            *** Methode ***;
            Doku="......................................................................./ \
            @brief\tVeranlasst das haptische Objekt, sich mit dem Proxy zu bewegen/ \
            @param\tpCache\tHLAPI-State Schnappschuss in dem Moment, in dem das Event \
            feuert.......................................................................";
            Name="handleDrag";
            ID=41;
            RueckgabeWert="void";
            {
              *** Parameter ***;
              Name="pCache";
              ID=42;
              Typ="HLcache *";
            };
          };
          {
            *** Methode ***;
            Doku="......................................................................./ \
            @brief\tNimmt die Proxy-Position beim Starten des Drag-Vorgangs auf/ @param\tpCache\tHLAPI-State \
            Schnappschuss in dem Moment, in dem das Event feuert.......................................................................";
            Name="initAction";
            ID=43;
            RueckgabeWert="void";
            {
              *** Parameter ***;
              Name="pCache";
              ID=44;
              Typ="HLcache *";
            };
          };
          {
            *** Methode ***;
            Doku="********************************************************************* \
            Implementierung der von IHapticAction geerbten Methoden*********************************************************************......................................................................./ \
            @brief\tRegistriert die Aktion für eine Shape bei HLAPI/ @param\tshapeID\tID \
            der Shape, für die die Aktion registriert werden soll.......................................................................";
            Name="registerAction";
            ID=45;
            IsVirtual=true;
            RueckgabeWert="void";
            {
              *** Parameter ***;
              Name="shapeID";
              ID=46;
              Typ="HLuint";
            };
          };
          {
            *** Methode ***;
            Doku="......................................................................./ \
            @brief\tMeldet die Aktion für eine Shape bei HLAPI ab/ @param\tshapeID\tID \
            der Shape, für die die Aktion registriert wurde.......................................................................";
            Name="unregisterAction";
            ID=47;
            IsVirtual=true;
            RueckgabeWert="void";
            {
              *** Parameter ***;
              Name="shapeID";
              ID=48;
              Typ="HLuint";
            };
          };
          {
            *** Aggregation ***;
            Doku="......................................................................./ \
            Das Objekt, dem der Eventhandler zugeordnet ist.......................................................................";
            ID=49;
            Datentyp="HapticObject *";
            Zugriff=1;
            A=19;
            B=113;
            RollenName="m_pDragObj";
          };
          {
            *** Vererbung ***;
            ID=50;
            A=19;
            B=140;
            BasisKlasse="IHapticAction";
          };
        };
      };
      {
        *** Klasse ***;
        Name="Copy of HapticCursor";
        ID=51;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="HapticCursor.cpp";
        FileActiveLine=-1;
        HeaderFileName="HapticCursor.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
      };
      {
        *** Klasse ***;
        Doku=".............................................................................../ \
        @brief\tEine Eventhandlerklasse die es ermöglicht, haptische Objekte mit \
        dem /\t\t\tPhantom zu bewegen/\t\t\t/\t\t\tDer Eventhandler reagiert auf \
        die folgende Events:/\t\t\t- der vordere Phantom-Button wird gedrückt, \
        wenn ein Objekt mit dem /\t\t\t  Phantom berührt wird/\t\t\t- das Phantom \
        wird mit gedrücktem Button bewegt/\t\t\t- der vordere Phantom-Button wird \
        losgelassen/\t\t\tWirkung: Solange der Button gedrückt gehalten wird, folgt \
        das /\t\t\tregistrierte Objekt der Bewegung des Phantom/ @todo\tObjekte \
        lassen sich noch nicht nach hinten verschieben...............................................................................";
        Name="DragObjectHandler";
        ID=52;
        Datentyp="class";
        Zugriff=3;
        KomponentenId=-1;
        FileName="genSource\\DragObjectHandler.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\DragObjectHandler.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Doku="......................................................................./ \
          Position des Proxy beim letzten Aufruf des Draghandlers/ Dient zur Berechnung \
          des Vektors um den das Objekt verschoben werden soll";
          Name="m_LastProxyPos";
          ID=53;
          Datentyp="hduVector3Dd";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tKonstruktor, initialisiert das Eventhandler-Objekt mit dem /\t\t\tzugehörigen \
          haptischen Objekt/ @param\tpObj\tPointer auf das haptische Objekt für das \
          der /\t\t\t\t\tEventhandler zuständig sein soll.......................................................................";
          Name="DragObjectHandler";
          ID=54;
          {
            *** Parameter ***;
            Name="pObj";
            ID=55;
            Typ="HapticObject *";
          };
        };
        {
          *** Methode ***;
          Doku="/ @brief\t(HLAPI-Callbackfunktion) Started das Draggen des Objekts/ \
          @param\tevent\tGibt an, auf welches HLAPI-Event hin die Callback-/\t\t\t\t\tFunktion \
          aufgerufen werden soll, hier HL_EVENT_1BUTTONDOWN/\t@param\tshapeID\tDie \
          ShapeID des Objekts, das bewegt werden soll/ @param\tthread\tGibt an, in \
          welchem HLAPI-Thread das Event behandelt /\t\t\t\t\twerden soll, in diesem \
          Fall HL_CLIENT_THREAD/ @param\tcache\tHLAPI-State Schnappschuss in dem \
          Moment, in dem das Event feuert/ @param\tpHandlerObject\tPointer auf das \
          DragObjectHandler-Objekt, das/\t\t\t\t\tdas Event verarbeiten soll.......................................................................";
          Name="OnButtonDown";
          ID=56;
          IsStatic=true;
          Zugriff=1;
          RueckgabeWert="void HLCALLBACK";
          {
            *** Parameter ***;
            Name="event";
            ID=57;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="shapeID";
            ID=58;
            Typ="HLuint";
          };
          {
            *** Parameter ***;
            Name="thread";
            ID=59;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="cache";
            ID=60;
            Typ="HLcache *";
          };
          {
            *** Parameter ***;
            Name="pHandlerObject";
            ID=61;
            Typ="void *";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\t(HLAPI-Callbackfunktion) Beendet das Draggen des Objekts/ @param\tevent\tGibt \
          an, auf welches HLAPI-Event hin die Callback-/\t\t\t\t\tFunktion aufgerufen \
          werden soll, hier HL_EVENT_1BUTTONUP/\t@param\tshapeID\thier soll HL_OBJECT_ANY \
          angegeben werden/ @param\tthread\tGibt an, in welchem HLAPI-Thread das \
          Event behandelt/\t\t\t\t\t werden soll, in diesem Fall HL_CLIENT_THREAD/ \
          @param\tcache\tHLAPI-State Schnappschuss in dem Moment, in dem das Event \
          feuert/ @param\tuserdata\tWird von dieser Funktion nicht benötigt.......................................................................";
          Name="OnButtonUp";
          ID=62;
          IsStatic=true;
          Zugriff=1;
          RueckgabeWert="void HLCALLBACK";
          {
            *** Parameter ***;
            Name="event";
            ID=63;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="shapeID";
            ID=64;
            Typ="HLuint";
          };
          {
            *** Parameter ***;
            Name="thread";
            ID=65;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="cache";
            ID=66;
            Typ="HLcache *";
          };
          {
            *** Parameter ***;
            Name="userdata";
            ID=67;
            Typ="void *";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\t(HLAPI-Callbackfunktion) Steuert das Draggen des Objekts/ @param\tevent\tGibt \
          an, auf welches HLAPI-Event hin die Callback-/\t\t\t\t\tFunktion aufgerufen \
          werden soll, hier HL_EVENT_MOTION/\t@param\tshapeID\thier soll HL_OBJECT_ANY \
          angegeben werden/ @param\tthread\tGibt an, in welchem HLAPI-Thread das \
          Event behandelt/\t\t\t\t\twerden soll, in diesem Fall HL_CLIENT_THREAD/ \
          @param\tcache\tHLAPI-State Schnappschuss in dem Moment, in dem das Event \
          feuert/ @param\tpHandlerObject\tPointer auf das DragObjectHandler-Objekt, \
          das/\t\t\t\t\t das Event verarbeiten soll.......................................................................";
          Name="OnDrag";
          ID=68;
          IsStatic=true;
          Zugriff=1;
          RueckgabeWert="void HLCALLBACK";
          {
            *** Parameter ***;
            Name="event";
            ID=69;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="shapeID";
            ID=70;
            Typ="HLuint";
          };
          {
            *** Parameter ***;
            Name="thread";
            ID=71;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="cache";
            ID=72;
            Typ="HLcache *";
          };
          {
            *** Parameter ***;
            Name="pHandlerObject";
            ID=73;
            Typ="void *";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tVeranlasst das haptische Objekt, sich mit dem Proxy zu bewegen/ \
          @param\tpCache\tHLAPI-State Schnappschuss in dem Moment, in dem das Event \
          feuert.......................................................................";
          Name="handleDrag";
          ID=74;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="pCache";
            ID=75;
            Typ="HLcache *";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tNimmt die Proxy-Position beim Starten des Drag-Vorgangs auf/ @param\tpCache\tHLAPI-State \
          Schnappschuss in dem Moment, in dem das Event feuert.......................................................................";
          Name="initAction";
          ID=76;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="pCache";
            ID=77;
            Typ="HLcache *";
          };
        };
        {
          *** Methode ***;
          Doku="********************************************************************* \
          Implementierung der von IHapticAction geerbten Methoden*********************************************************************......................................................................./ \
          @brief\tRegistriert die Aktion für eine Shape bei HLAPI/ @param\tshapeID\tID \
          der Shape, für die die Aktion registriert werden soll.......................................................................";
          Name="registerAction";
          ID=78;
          IsVirtual=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="shapeID";
            ID=79;
            Typ="HLuint";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tMeldet die Aktion für eine Shape bei HLAPI ab/ @param\tshapeID\tID \
          der Shape, für die die Aktion registriert wurde.......................................................................";
          Name="unregisterAction";
          ID=80;
          IsVirtual=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="shapeID";
            ID=81;
            Typ="HLuint";
          };
        };
        {
          *** Assoziation ***;
          ID=82;
          Datentyp="HapticObject*";
          Zugriff=2;
          A=52;
          B=113;
          RollenName="m_pDragObj";
        };
        {
          *** Vererbung ***;
          Stereotype="implements";
          ID=83;
          A=52;
          B=140;
        };
      };
      {
        *** Klasse ***;
        Name="Edge";
        ID=84;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\Edge.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\Edge.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Vererbung ***;
          ID=85;
          A=84;
          B=113;
        };
      };
      {
        *** Klasse ***;
        Name="GraphScene";
        ID=86;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\GraphScene.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\GraphScene.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Methode ***;
          Name="addObject";
          ID=87;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="obj";
            ID=88;
            Typ="HapticObject *";
          };
        };
        {
          *** Methode ***;
          Name="initScene";
          ID=89;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="renderScene";
          ID=90;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="bHapticsEnabled";
            ID=91;
            Typ="bool";
          };
        };
        {
          *** Assoziation ***;
          ID=92;
          Datentyp="vector<HapticObject>";
          Zugriff=1;
          A=86;
          B=113;
          RollenName="m_SceneElements";
          KardinalitaetAnfangsKlasse="0..*";
          KardinalitaetEndeKlasse="1";
        };
      };
      {
        *** Klasse ***;
        Name="Grid";
        ID=93;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\Grid.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\Grid.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Vererbung ***;
          ID=94;
          A=93;
          B=113;
        };
      };
      {
        *** Klasse ***;
        Name="HapticConstraint";
        ID=95;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\HapticConstraint.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\HapticConstraint.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Name="m_HLConstraintID";
          ID=96;
          Datentyp="HLuint";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_SnapDistance";
          ID=97;
          Datentyp="HLfloat";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Name="HapticConstraint";
          ID=98;
          {
            *** Parameter ***;
            Name="snapDist";
            ID=99;
            Typ="HLfloat";
          };
        };
        {
          *** Methode ***;
          Name="renderConstraint";
          ID=100;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="setSnapDistance";
          ID=101;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=102;
            Typ="HLfloat";
          };
        };
        {
          *** Methode ***;
          Name="~HapticConstraint";
          ID=103;
          IsVirtual=true;
        };
      };
      {
        *** Klasse ***;
        Name="HapticCursor";
        ID=104;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\HapticCursor.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\HapticCursor.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Doku="......................................................................./ \
          @brief\tSkalierungsfaktor, der je nach Projektion berechnet wird........................................................................";
          Name="m_Scale";
          ID=195;
          Datentyp="double";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Doku="......................................................................./ \
          @brief\tGröße des Cursors in Pixeln........................................................................";
          Name="m_SizePixels";
          ID=196;
          Datentyp="int";
          IsConst=true;
          Zugriff=1;
        };
        {
          *** Methode ***;
          Doku="......................................................................./.......................................................................";
          Name="HapticCursor";
          ID=197;
          {
            *** Parameter ***;
            Name="sizePix";
            ID=198;
            Typ="int";
            Default="DEFAULT_CURSOR_SIZE_PIX";
          };
        };
        {
          *** Methode ***;
          Name="render";
          ID=199;
          IsVirtual=true;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="scale";
          ID=200;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="~HapticCursor";
          ID=201;
          IsVirtual=true;
        };
      };
      {
        *** Klasse ***;
        Name="HapticDevice";
        ID=107;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\HapticDevice.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\HapticDevice.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Name="m_hHLRenderingContext";
          ID=108;
          Datentyp="HHLRC";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_hHapticDevice";
          ID=109;
          Datentyp="HHD";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Name="initialize";
          ID=110;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="isActive";
          ID=111;
          RueckgabeWert="bool";
        };
        {
          *** Methode ***;
          Name="updateWorkspace";
          ID=112;
          RueckgabeWert="void";
        };
      };
      {
        *** Klasse ***;
        Name="HapticObject";
        ID=113;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\HapticObject.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\HapticObject.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Name="m_HLShapeID";
          ID=114;
          Datentyp="HLuint";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Name="HapticObject";
          ID=115;
        };
        {
          *** Methode ***;
          Name="addGraphicMaterial";
          ID=116;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="material";
            ID=117;
            Typ="IGraphicMaterial *";
          };
        };
        {
          *** Methode ***;
          Name="addHapticAction";
          ID=118;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="act";
            ID=119;
            Typ="IHapticAction *";
          };
        };
        {
          *** Methode ***;
          Name="addHapticMaterial";
          ID=120;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="material";
            ID=121;
            Typ="IHapticMaterial *";
          };
        };
        {
          *** Methode ***;
          Name="renderDefaultGraphicProperties";
          ID=122;
          IsVirtual=true;
          Zugriff=1;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="renderDefaultHapticProperties";
          ID=123;
          IsVirtual=true;
          Zugriff=1;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="renderGraphics";
          ID=124;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="renderHaptics";
          ID=125;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="renderShape";
          ID=126;
          IsAbstract=true;
          Zugriff=1;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="setHapticConstraint";
          ID=127;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=128;
            Typ="const HapticConstraint*";
          };
        };
        {
          *** Methode ***;
          Name="setPosition";
          ID=129;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=130;
            Typ="const Position &";
          };
        };
        {
          *** Methode ***;
          Name="~HapticObject";
          ID=131;
          IsVirtual=true;
        };
        {
          *** Assoziation ***;
          ID=132;
          Zugriff=2;
          A=113;
          B=138;
          RollenName="igraphicproperty";
        };
        {
          *** Assoziation ***;
          ID=133;
          Datentyp="vector<IGraphicProperty>";
          Zugriff=1;
          A=113;
          B=138;
          RollenName="m_graphicProperties";
          KardinalitaetAnfangsKlasse="0..*";
          KardinalitaetEndeKlasse="1";
        };
        {
          *** Assoziation ***;
          ID=134;
          Datentyp="vector<IHapticProperty>";
          Zugriff=1;
          A=113;
          B=145;
          RollenName="m_hapticProperties";
          KardinalitaetAnfangsKlasse="0..*";
          KardinalitaetEndeKlasse="1";
        };
        {
          *** Assoziation ***;
          ID=135;
          Datentyp="vector<IHapticAction>";
          Zugriff=1;
          A=113;
          B=140;
          RollenName="m_hapticActions";
          KardinalitaetAnfangsKlasse="0..*";
          KardinalitaetEndeKlasse="1";
        };
        {
          *** Assoziation ***;
          ID=136;
          Datentyp="Position";
          Zugriff=1;
          A=113;
          B=152;
          RollenName="m_position";
        };
        {
          *** Assoziation ***;
          ID=137;
          Datentyp="HapticConstraint*";
          Zugriff=1;
          A=113;
          B=95;
          RollenName="m_hapticConstraint";
          KardinalitaetAnfangsKlasse="0..1";
          KardinalitaetEndeKlasse="0..1";
        };
      };
      {
        *** Klasse ***;
        Name="IGraphicMaterial";
        Stereotype="Interface";
        ID=138;
        Image="Interface";
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\GraphicalProperty.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\GraphicalProperty.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Methode ***;
          Name="renderProperty";
          ID=139;
          IsAbstract=true;
          RueckgabeWert="void";
        };
      };
      {
        *** Klasse ***;
        Name="IHapticAction";
        Stereotype="Interface";
        ID=140;
        Image="Interface";
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\HapticAction.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\HapticAction.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Methode ***;
          Name="registerAction";
          ID=141;
          IsAbstract=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="shapeID";
            ID=142;
            Typ="HLuint";
          };
        };
        {
          *** Methode ***;
          Name="unregisterAction";
          ID=143;
          IsAbstract=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="shapeID";
            ID=144;
            Typ="HLuint";
          };
        };
      };
      {
        *** Klasse ***;
        Name="IHapticMaterial";
        Stereotype="Interface";
        ID=145;
        Image="Interface";
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\HapticProperty.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\HapticProperty.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Methode ***;
          Name="renderProperty";
          ID=146;
          IsAbstract=true;
          RueckgabeWert="void";
        };
      };
      {
        *** Klasse ***;
        Name="Node";
        ID=147;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\Node.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\Node.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Methode ***;
          Name="setTexture";
          ID=148;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=149;
            Typ="const Texture*";
          };
        };
        {
          *** Assoziation ***;
          ID=150;
          Datentyp="Texture*";
          Zugriff=1;
          A=147;
          B=156;
          RollenName="m_Texture";
          KardinalitaetAnfangsKlasse="0..1";
          KardinalitaetEndeKlasse="0..1";
        };
        {
          *** Vererbung ***;
          ID=151;
          A=147;
          B=113;
        };
      };
      {
        *** Klasse ***;
        Name="Position";
        Stereotype="struct";
        ID=152;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\Utilities.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\Utilities.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Name="x";
          ID=153;
          Datentyp="GLfloat";
        };
        {
          *** Attribut ***;
          Name="y";
          ID=154;
          Datentyp="GLfloat";
        };
        {
          *** Attribut ***;
          Name="z";
          ID=155;
          Datentyp="GLfloat";
        };
      };
      {
        *** Klasse ***;
        Name="Texture";
        ID=156;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\Texture.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\Texture.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
      };
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\main.cpp";
      ActiveLine=-1;
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\genSource\\HapticCursor.cpp";
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\genSource\\HapticCursor.h";
      ActiveLine=7;
    };
  };
};
