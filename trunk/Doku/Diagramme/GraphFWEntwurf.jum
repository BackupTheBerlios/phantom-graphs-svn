Jumli
{
  *** Applikation ***;
  Version=1.4;
  Elements=376;
  {
    *** Model ***;
    Typ=2;
    MainFile="main.cpp";
    ActiveDiagramm=21;
    {
      *** GenSettings ***;
      GetPrefix="Get";
      SetPrefix="Set";
      DBBaseClass="DbBasisObject";
      DBRecordSet="DbSet";
      GenerateWrite=true;
      GenerateRead=true;
    };
    {
      *** CompileDebugSettings ***;
      AufrufCompiler="g++";
      AufrufDebugger="gdb";
      DebugOptionen="-nw";
    };
    {
      *** Package ***;
      Name="UseCases";
      ID=3;
      Zugriff=2;
      Type=2;
      {
        *** Diagramm ***;
        Name="UseCases";
        ID=4;
        DiagrammTyp=2;
        {
          *** UseCaseZeichner ***;
          Rechteck=375,198,434,237;
          Order=-1;
          UMLElementID=5;
        };
        {
          *** UseCaseZeichner ***;
          Rechteck=376,309,435,348;
          Order=-1;
          UMLElementID=6;
        };
        {
          *** UseCaseZeichner ***;
          Rechteck=376,428,435,467;
          Order=-1;
          UMLElementID=7;
        };
        {
          *** ActorZeichner ***;
          Rechteck=93,290,132,349;
          Order=-1;
          UMLElementID=8;
        };
        {
          *** ActorZeichner ***;
          Rechteck=695,427,734,486;
          Order=-1;
          UMLElementID=12;
        };
        {
          *** SystemZeichner ***;
          Rechteck=213,127,609,598;
          Order=-1;
          UMLElementID=14;
        };
        {
          *** BeziehungZeichner ***;
          Rechteck=252,325,259,332;
          Order=-1;
          UMLElementID=9;
          TextOffset=0,5;
        };
        {
          *** BeziehungZeichner ***;
          Order=-1;
          UMLElementID=10;
          TextOffset=0,5;
        };
        {
          *** BeziehungZeichner ***;
          Rechteck=540,456,547,463;
          Order=-1;
          UMLElementID=13;
          TextOffset=0,5;
        };
        {
          *** BeziehungZeichner ***;
          Order=-1;
          UMLElementID=11;
          TextOffset=0,5;
        };
      };
      {
        *** UseCase ***;
        Doku="Wird vom Layout Designer gestartet indem mit dem \nPhantom einer \
        oder mehrere Knoten markiert werden. \nSpießt der Layout Designer nun einen \
        der markierten \nKnoten auf, kann er an dem markierten Teilgraphen \nziehen. \
        Wendet er genügend Kraft an, wird der Teilgraph \naus dem ursprünglichen \
        Graphen gelöst.";
        Name="Teilgraph lösen";
        ID=5;
        Zugriff=2;
      };
      {
        *** UseCase ***;
        Doku="Der Layout Designer startet den Use Case indem er einen \nKnoten \
        mit dem Phantom aufspießt. Er kann den Knoten \nnun auf einem durch Constraints \
        vorgegebenen Gitter \nverschieben. Wie leicht sich der Knoten verschieben \
        \nlässt, hängt davon ab, wie eng der Knoten mit seinen \nNachbarn verbunden \
        ist. Das Verschieben eines Knotens \nwird beendet, wenn der Layout Designer \
        den Knoten mit \ndem Phantom wieder loslässt.";
        Name="Knoten verschieben";
        ID=6;
        Zugriff=2;
      };
      {
        *** UseCase ***;
        Doku="Der Betrachter startet den Use Case, indem er einen \nStartknoten \
        und einen Zielknoten auswählt und dann im \nMenü \"Kantenzug\" anklickt. \
        Das System setzt das \nPhantom an den Startknoten. Für Kanten, die zum \
        \nZielknoten führen, werden Constraints aktiviert, damit der\nBetrachter \
        zum Ziel geleitet wird. Der Use Case ist beendet,\nwenn das Phantom am \
        Zielknoten angekommen ist.";
        Name="Kantenzug";
        ID=7;
        Zugriff=2;
      };
      {
        *** Actor ***;
        Name="LayoutDesigner";
        ID=8;
        Zugriff=2;
        {
          *** Beziehung ***;
          ID=9;
          Zugriff=2;
          A=8;
          B=6;
        };
        {
          *** Beziehung ***;
          ID=10;
          Zugriff=2;
          A=8;
          B=5;
        };
        {
          *** Beziehung ***;
          ID=11;
          Zugriff=2;
          A=8;
          B=7;
        };
      };
      {
        *** Actor ***;
        Name="Betrachter";
        ID=12;
        Zugriff=2;
        {
          *** Beziehung ***;
          ID=13;
          Zugriff=2;
          A=12;
          B=7;
        };
      };
      {
        *** System ***;
        Name="HapticGraphFrameWork";
        ID=14;
      };
    };
    {
      *** Package ***;
      Name="GraphFWEntwurf";
      ID=15;
      Zugriff=2;
      {
        *** Diagramm ***;
        Name="GraphFWEntwurf";
        ID=16;
        {
          *** CJumliTracker ***;
          Rechteck=52,412,310,669;
          Order=-1;
          UMLElementID=246;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=658,565,816,635;
          Order=-1;
          UMLElementID=279;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=658,653,816,723;
          Order=-1;
          UMLElementID=286;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=657,267,821,354;
          Order=-1;
          UMLElementID=281;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=702,30,931,151;
          Order=-1;
          UMLElementID=230;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=542,30,671,168;
          Order=-1;
          UMLElementID=222;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=657,368,836,557;
          Order=-1;
          UMLElementID=210;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=31,30,231,185;
          Order=-1;
          UMLElementID=183;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=311,81,480,253;
          Order=-1;
          UMLElementID=236;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=870,207,1047,396;
          Order=-1;
          UMLElementID=54;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=531,556,538,563;
          Order=-1;
          UMLElementID=265;
          Knick=535,560;
          TextOffset=0,5;
          OffsetRollenName=-52,-18;
          OffsetA=5,5;
          OffsetB=2,-8;
          {
            *** Linie ***;
            Punkt=535,560;
          };
          {
            *** Linie ***;
            Punkt=438,505;
          };
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=417,533,427,550;
          Order=-1;
          UMLElementID=266;
          Knick=569,688;
          TextOffset=0,5;
          OffsetRollenName=-45,-19;
          OffsetA=5,5;
          OffsetB=8,-18;
          {
            *** Linie ***;
            Punkt=569,688;
          };
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=443,433,450,440;
          Order=-1;
          UMLElementID=267;
          Knick=447,437;
          TextOffset=0,5;
          OffsetRollenName=-37,-18;
          OffsetA=5,5;
          OffsetB=6,-4;
          {
            *** Linie ***;
            Punkt=447,437;
          };
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=575,458,582,465;
          Order=-1;
          UMLElementID=268;
          Knick=473,465;
          TextOffset=0,5;
          OffsetRollenName=-38,-19;
          OffsetA=5,5;
          OffsetB=5,-1;
          {
            *** Linie ***;
            Punkt=473,465;
          };
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=259,308,375,325;
          Order=-1;
          UMLElementID=194;
          TextOffset=0,5;
          OffsetRollenName=69,-11;
          OffsetA=-10,2;
          OffsetB=5,5;
        };
      };
      {
        *** Diagramm ***;
        Name="HapticEffects";
        ID=17;
        {
          *** CJumliTracker ***;
          Rechteck=319,30,488,202;
          Order=-1;
          UMLElementID=236;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=324,310,493,465;
          Order=-1;
          UMLElementID=170;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=97,310,288,465;
          Order=-1;
          UMLElementID=72;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=532,310,701,465;
          Order=-1;
          UMLElementID=360;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=731,310,959,499;
          Order=-1;
          UMLElementID=340;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** VererbungZeichner ***;
          Order=-1;
          UMLElementID=182;
          TextOffset=0,5;
        };
        {
          *** VererbungZeichner ***;
          Order=-1;
          UMLElementID=86;
          TextOffset=0,5;
        };
        {
          *** VererbungZeichner ***;
          Order=-1;
          UMLElementID=372;
          TextOffset=0,5;
        };
        {
          *** VererbungZeichner ***;
          Order=-1;
          UMLElementID=358;
          TextOffset=0,5;
        };
      };
      {
        *** Diagramm ***;
        Name="HapticActions";
        ID=18;
        {
          *** CJumliTracker ***;
          Rechteck=246,84,410,171;
          Order=-1;
          UMLElementID=281;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=61,268,304,457;
          Order=-1;
          UMLElementID=123;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=323,268,566,491;
          Order=-1;
          UMLElementID=87;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** VererbungZeichner ***;
          Rechteck=218,207,318,224;
          Order=-1;
          UMLElementID=154;
          Knick=281,270;
          TextOffset=-13,-62;
          {
            *** Linie ***;
            Punkt=281,270;
          };
        };
        {
          *** VererbungZeichner ***;
          Rechteck=345,207,445,224;
          Order=-1;
          UMLElementID=122;
          Knick=357,263;
          TextOffset=38,-55;
          {
            *** Linie ***;
            Punkt=357,263;
          };
        };
      };
      {
        *** Diagramm ***;
        Name="Utilities";
        ID=19;
        {
          *** CJumliTracker ***;
          Rechteck=90,66,195,204;
          Order=-1;
          UMLElementID=331;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
      };
      {
        *** Diagramm ***;
        Name="Businesslogic";
        ID=20;
        {
          *** CJumliTracker ***;
          Rechteck=71,299,228,420;
          Order=-1;
          UMLElementID=269;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=368,498,631,585;
          Order=-1;
          UMLElementID=275;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=488,60,601,119;
          Order=-1;
          UMLElementID=288;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=71,60,280,198;
          Order=-1;
          UMLElementID=321;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=452,703,630,824;
          Order=-1;
          UMLElementID=23;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=481,208,661,465;
          Order=-1;
          UMLElementID=291;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=70,595,311,886;
          Order=-1;
          UMLElementID=30;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** VererbungZeichner ***;
          Order=-1;
          UMLElementID=274;
          TextOffset=0,5;
        };
        {
          *** VererbungZeichner ***;
          Order=-1;
          UMLElementID=320;
          TextOffset=0,5;
        };
        {
          *** VererbungZeichner ***;
          Order=-1;
          UMLElementID=52;
          TextOffset=0,5;
        };
        {
          *** VererbungZeichner ***;
          Rechteck=377,612,384,619;
          Order=-1;
          UMLElementID=53;
          TextOffset=0,5;
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=279,83,286,90;
          Order=-1;
          UMLElementID=330;
          Knick=283,87;
          TextOffset=0,5;
          OffsetRollenName=-34,-20;
          OffsetA=5,5;
          OffsetB=5,5;
          {
            *** Linie ***;
            Punkt=283,87;
          };
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=254,316,377,333;
          Order=-1;
          UMLElementID=316;
          TextOffset=0,5;
          OffsetRollenName=53,-19;
          OffsetA=5,5;
          OffsetB=5,5;
        };
      };
      {
        *** Diagramm ***;
        Name="HapticObjects";
        ID=21;
        {
          *** CJumliTracker ***;
          Rechteck=167,99,425,356;
          Order=-1;
          UMLElementID=246;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=44,445,280,770;
          Order=-1;
          UMLElementID=291;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=596,261,854,450;
          Order=-1;
          UMLElementID=195;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** CJumliTracker ***;
          Rechteck=404,535,584,724;
          Order=-1;
          UMLElementID=155;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** VererbungZeichner ***;
          Rechteck=208,401,215,408;
          Order=-1;
          UMLElementID=319;
          Knick=212,405;
          TextOffset=0,5;
          {
            *** Linie ***;
            Punkt=212,405;
          };
        };
        {
          *** VererbungZeichner ***;
          Rechteck=514,293,521,300;
          Order=-1;
          UMLElementID=209;
          Knick=518,297;
          TextOffset=0,5;
          {
            *** Linie ***;
            Punkt=518,297;
          };
        };
        {
          *** VererbungZeichner ***;
          Rechteck=380,524,387,531;
          Order=-1;
          UMLElementID=169;
          TextOffset=0,5;
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=247,585,362,602;
          Order=-1;
          UMLElementID=317;
          TextOffset=0,5;
          OffsetRollenName=-34,-22;
          OffsetA=5,5;
          OffsetB=5,5;
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=442,713,449,720;
          Order=-1;
          UMLElementID=318;
          Knick=296,671;
          TextOffset=0,5;
          OffsetRollenName=-33,-22;
          OffsetA=5,5;
          OffsetB=5,5;
          {
            *** Linie ***;
            Punkt=296,671;
          };
        };
        {
          *** CJumliTracker ***;
          Rechteck=49,944,218,1116;
          Order=-1;
          UMLElementID=236;
          IsWithAttributs=true;
          IsWithMethods=true;
          IsHideTaggedValue=true;
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=9,897,152,914;
          Order=-1;
          UMLElementID=373;
          Knick=117,868;
          TextOffset=0,5;
          OffsetRollenName=-39,-11;
          OffsetA=5,5;
          OffsetB=5,5;
          {
            *** Linie ***;
            Punkt=117,868;
          };
        };
        {
          *** AssoziationZeichner ***;
          Rechteck=164,897,343,914;
          Order=-1;
          UMLElementID=439;
          Knick=209,859;
          TextOffset=0,5;
          OffsetRollenName=46,-11;
          OffsetA=5,5;
          OffsetB=5,5;
          {
            *** Linie ***;
            Punkt=209,859;
          };
        };
      };
      {
        *** Package ***;
        Name="genSource";
        ID=22;
        Zugriff=2;
      };
      {
        *** Klasse ***;
        Name="AppConfiguration";
        ID=23;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\AppConfiguration.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\AppConfiguration.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Name="m_ProjectDuration";
          ID=24;
          Datentyp="int";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Name="AppConfiguration";
          ID=25;
        };
        {
          *** Methode ***;
          Name="getProjectDuration";
          ID=26;
          RueckgabeWert="int";
        };
        {
          *** Methode ***;
          Name="setProjectDuration";
          ID=27;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=28;
            Typ="int";
          };
        };
        {
          *** Methode ***;
          Name="~AppConfiguration";
          ID=29;
          IsVirtual=true;
        };
      };
      {
        *** Klasse ***;
        Doku=".............................................................................../ \
        @brief\tdiese KLasse verwaltet alle Aufgaben, die im Graf dargestellt werden \
        sollen./...............................................................................";
        Name="BusinessTask";
        ID=30;
        Datentyp="class";
        Zugriff=3;
        KomponentenId=-1;
        FileName="genSource\\BusinessTask.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\BusinessTask.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Name="day_begin";
          ID=31;
          Datentyp="int";
          Zugriff=2;
        };
        {
          *** Attribut ***;
          Name="day_duration";
          ID=32;
          Datentyp="int";
          Zugriff=2;
        };
        {
          *** Attribut ***;
          Name="day_end";
          ID=33;
          Datentyp="int";
          Zugriff=2;
        };
        {
          *** Attribut ***;
          Name="day_final";
          ID=34;
          Datentyp="int";
          Zugriff=2;
        };
        {
          *** Attribut ***;
          Name="force";
          ID=35;
          Datentyp="int";
          Zugriff=2;
        };
        {
          *** Attribut ***;
          Name="isMilestone";
          ID=36;
          Datentyp="bool";
          Zugriff=2;
        };
        {
          *** Attribut ***;
          Name="name[60]";
          ID=37;
          Datentyp="char";
          Zugriff=2;
        };
        {
          *** Attribut ***;
          Name="surface";
          ID=38;
          Datentyp="int";
          Zugriff=2;
        };
        {
          *** Methode ***;
          Name="BusinessTask";
          ID=44;
        };
        {
          *** Methode ***;
          Name="BusinessTask";
          ID=39;
          {
            *** Parameter ***;
            Name="day_begin";
            ID=40;
            Typ="int";
          };
          {
            *** Parameter ***;
            Name="day_duration";
            ID=41;
            Typ="int";
          };
          {
            *** Parameter ***;
            Name="day_final";
            ID=42;
            Typ="int";
          };
          {
            *** Parameter ***;
            Name="isMilestone";
            ID=43;
            Typ="bool";
          };
        };
        {
          *** Methode ***;
          Name="businessToViewCoordinates";
          ID=45;
          Zugriff=1;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="calcDayEnd";
          ID=46;
          Zugriff=2;
          RueckgabeWert="int";
          {
            *** Parameter ***;
            Name="begin";
            ID=47;
            Typ="int";
          };
          {
            *** Parameter ***;
            Name="duration";
            ID=48;
            Typ="int";
          };
        };
        {
          *** Methode ***;
          Name="getForce";
          ID=49;
          RueckgabeWert="int";
        };
        {
          *** Methode ***;
          Name="viewToBusinessCoordinates";
          ID=50;
          Zugriff=1;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="~BusinessTask";
          ID=51;
          IsVirtual=true;
        };
        {
          *** Vererbung ***;
          ID=52;
          A=30;
          B=269;
          BasisKlasse="IBusinessAdapter";
        };
        {
          *** Vererbung ***;
          ID=53;
          A=30;
          B=275;
          BasisKlasse="IBusinessConverter";
        };
      };
      {
        *** Klasse ***;
        Name="Camera";
        ID=54;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\Camera.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\Camera.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Name="m_FarDistance";
          ID=55;
          Datentyp="double";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_FovY";
          ID=56;
          Datentyp="double";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_NearDistance";
          ID=57;
          Datentyp="double";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_Ratio";
          ID=58;
          Datentyp="double";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Name="Camera";
          ID=59;
          {
            *** Parameter ***;
            Name="fovY";
            ID=60;
            Typ="double";
          };
          {
            *** Parameter ***;
            Name="viewportWidth";
            ID=61;
            Typ="int";
          };
          {
            *** Parameter ***;
            Name="viewportHeight";
            ID=62;
            Typ="int";
          };
        };
        {
          *** Methode ***;
          Name="getRatio";
          ID=63;
          RueckgabeWert="double";
        };
        {
          *** Methode ***;
          Name="recalculateView";
          ID=64;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="viewportWidth";
            ID=65;
            Typ="int";
          };
          {
            *** Parameter ***;
            Name="viewportHeight";
            ID=66;
            Typ="int";
          };
        };
        {
          *** Methode ***;
          Name="translateView";
          ID=67;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="x";
            ID=68;
            Typ="double";
          };
          {
            *** Parameter ***;
            Name="y";
            ID=69;
            Typ="double";
          };
          {
            *** Parameter ***;
            Name="z";
            ID=70;
            Typ="double";
          };
        };
        {
          *** Methode ***;
          Name="~Camera";
          ID=71;
          IsVirtual=true;
        };
      };
      {
        *** Klasse ***;
        Name="ConstantForceEffect";
        ID=72;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\ConstantForceEffect.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\ConstantForceEffect.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Name="m_Direction";
          ID=73;
          Datentyp="hduVector3Dd";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_Magnitude";
          ID=74;
          Datentyp="double";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Name="ConstantForceEffect";
          ID=75;
          {
            *** Parameter ***;
            Name="direction[3]";
            ID=76;
            Typ="const double";
          };
          {
            *** Parameter ***;
            Name="magnitude";
            ID=77;
            Typ="double";
          };
        };
        {
          *** Methode ***;
          Name="renderProperties";
          ID=78;
          IsVirtual=true;
          Zugriff=1;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="setDirection";
          ID=79;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="x";
            ID=80;
            Typ="double";
          };
          {
            *** Parameter ***;
            Name="y";
            ID=81;
            Typ="double";
          };
          {
            *** Parameter ***;
            Name="z";
            ID=82;
            Typ="double";
          };
        };
        {
          *** Methode ***;
          Name="setMagnitude";
          ID=83;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=84;
            Typ="double";
          };
        };
        {
          *** Methode ***;
          Name="~ConstantForceEffect";
          ID=85;
          IsVirtual=true;
        };
        {
          *** Vererbung ***;
          ID=86;
          A=72;
          B=236;
        };
      };
      {
        *** Klasse ***;
        Doku=" .............................................................................../ \
        @author\tKatharina Greiner, Matr.-Nr. 943471// @brief\tEine Eventhandlerklasse \
        die es ermöglicht, haptische Nodes mit dem /\t\t\tPhantom in x-Richtung \
        auf einem Grid zu bewegen./\t\t\t/\t\t\tDer Eventhandler reagiert auf die \
        folgende Events:/\t\t\t- der vordere Phantom-Button wird gedrückt, wenn \
        ein Objekt mit dem /\t\t\t  Phantom berührt wird/\t\t\t- das Phantom wird \
        mit gedrücktem Button bewegt/\t\t\t- der vordere Phantom-Button wird losgelassen/\t\t\tWirkung: \
        Der Node folgt den Bewegungen des Phantom in x-Richtung. Die/\t\t\tBewegung \
        des Phantom in y- und z-Richtung wird von dem Node ignoriert./\t\t\tBeim \
        Loslassen des Buttons rastet der Node an dem nächstgelegenen/\t\t\tGitterpunkt \
        ein................................................................................";
        Name="DragNodeOnGridHandler";
        ID=87;
        Datentyp="class";
        Zugriff=3;
        KomponentenId=-1;
        FileName="genSource\\DragNodeOnGridHandler.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\DragNodeOnGridHandler.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Doku=" ......................................................................./ \
          @brief\tPosition des Proxy beim letzten Aufruf des Draghandlers. Dient/\t\t\tzur \
          Berechnung des Vektors um den das Objekt verschoben werden soll. .......................................................................";
          Name="m_LastProxyPos";
          ID=88;
          Datentyp="hduVector3Dd";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tKonstruktor, initialisiert das Eventhandler-Objekt mit dem /\t\t\tzugehörigen \
          Node und dem Grid, auf dem dieser bewegt werden soll./ @param\tpNode\tPointer \
          auf den Node für den der Eventhandler /\t\t\t\t\tzuständig sein soll./ \
          @param\tpGrid\tPointer auf das Grid, auf dem der Node bewegt werden soll........................................................................";
          Name="DragNodeOnGridHandler";
          ID=89;
          {
            *** Parameter ***;
            Name="pNode";
            ID=90;
            Typ="Node*";
          };
          {
            *** Parameter ***;
            Name="pGrid";
            ID=91;
            Typ="Grid *";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\t(HLAPI-Callbackfunktion) Started das Draggen des Objekts./ @param\tevent\tGibt \
          an, auf welches HLAPI-Event hin die Callback-/\t\t\t\t\tFunktion aufgerufen \
          werden soll, hier HL_EVENT_1BUTTONDOWN./\t@param\tshapeID\tDie ShapeID \
          des Objekts, das bewegt werden soll./ @param\tthread\tGibt an, in welchem \
          HLAPI-Thread das Event behandelt /\t\t\t\t\twerden soll, in diesem Fall \
          HL_CLIENT_THREAD./ @param\tcache\tHLAPI-State Schnappschuss in dem Moment, \
          in dem das Event feuert./ @param\tpHandlerObject\tPointer auf das DragNodeOnGridHandler-Objekt, \
          /\t\t\t\t\tdas\tdas Event verarbeiten soll........................................................................";
          Name="OnButtonDown";
          ID=92;
          IsStatic=true;
          Zugriff=1;
          RueckgabeWert="void HLCALLBACK";
          {
            *** Parameter ***;
            Name="event";
            ID=93;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="shapeID";
            ID=94;
            Typ="HLuint";
          };
          {
            *** Parameter ***;
            Name="thread";
            ID=95;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="cache";
            ID=96;
            Typ="HLcache *";
          };
          {
            *** Parameter ***;
            Name="pHandlerObject";
            ID=97;
            Typ="void *";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\t(HLAPI-Callbackfunktion) Beendet das Draggen des Objekts./ @param\tevent\tGibt \
          an, auf welches HLAPI-Event hin die Callback-/\t\t\t\t\tFunktion aufgerufen \
          werden soll, hier HL_EVENT_1BUTTONUP./\t@param\tshapeID\tHier soll HL_OBJECT_ANY \
          angegeben werden./ @param\tthread\tGibt an, in welchem HLAPI-Thread das \
          Event behandelt/\t\t\t\t\twerden soll, in diesem Fall HL_CLIENT_THREAD./ \
          @param\tcache\tHLAPI-State Schnappschuss in dem Moment, in dem das Event \
          feuert./ @param\tpHandlerObject\tPointer auf das DragNodeOnGridHandler-Objekt, \
          /\t\t\t\t\tdas\tdas Event verarbeiten soll........................................................................";
          Name="OnButtonUp";
          ID=98;
          IsStatic=true;
          Zugriff=1;
          RueckgabeWert="void HLCALLBACK";
          {
            *** Parameter ***;
            Name="event";
            ID=99;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="shapeID";
            ID=100;
            Typ="HLuint";
          };
          {
            *** Parameter ***;
            Name="thread";
            ID=101;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="cache";
            ID=102;
            Typ="HLcache *";
          };
          {
            *** Parameter ***;
            Name="pHandlerObject";
            ID=103;
            Typ="void *";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\t(HLAPI-Callbackfunktion) Steuert das Draggen des Objekts./ @param\tevent\tGibt \
          an, auf welches HLAPI-Event hin die Callback-/\t\t\t\t\tFunktion aufgerufen \
          werden soll, hier HL_EVENT_MOTION/\t@param\tshapeID\tHier soll HL_OBJECT_ANY \
          angegeben werden./ @param\tthread\tGibt an, in welchem HLAPI-Thread das \
          Event behandelt/\t\t\t\t\twerden soll, in diesem Fall HL_CLIENT_THREAD./ \
          @param\tcache\tHLAPI-State Schnappschuss in dem Moment, in dem das Event \
          feuert./ @param\tpHandlerObject\tPointer auf das DragNodeOnGridHandler-Objekt, \
          /\t\t\t\t\tdas\tdas Event verarbeiten soll........................................................................";
          Name="OnDrag";
          ID=104;
          IsStatic=true;
          Zugriff=1;
          RueckgabeWert="void HLCALLBACK";
          {
            *** Parameter ***;
            Name="event";
            ID=105;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="shapeID";
            ID=106;
            Typ="HLuint";
          };
          {
            *** Parameter ***;
            Name="thread";
            ID=107;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="cache";
            ID=108;
            Typ="HLcache *";
          };
          {
            *** Parameter ***;
            Name="pHandlerObject";
            ID=109;
            Typ="void *";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tSorgt dafür, dass der Node am Ende des Dragvorgangs auf den /\t\t\tnächstgelegenen \
          gültigen Gitterpunkt des Grid gesetzt wird........................................................................";
          Name="finishAction";
          ID=110;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tVeranlasst das haptische Objekt, sich mit dem Proxy zu bewegen./ \
          @param\tpCache\tHLAPI-State Schnappschuss in dem Moment, in dem das /\t\t\t\t\tEvent \
          feuert........................................................................";
          Name="handleDrag";
          ID=111;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="pCache";
            ID=112;
            Typ="HLcache *";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tNimmt die Proxy-Position beim Starten des Drag-Vorgangs auf./ @param\tpCache\tHLAPI-State \
          Schnappschuss in dem Moment, in dem das /\t\t\t\t\tEvent feuert........................................................................";
          Name="initAction";
          ID=113;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="pCache";
            ID=114;
            Typ="HLcache *";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tMeldet die Aktion für eine Shape bei HLAPI ab./ @param\tshapeID\tID \
          der Shape, für die die Aktion registriert wurde........................................................................";
          Name="registerAction";
          ID=115;
          IsVirtual=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="shapeID";
            ID=116;
            Typ="HLuint";
          };
        };
        {
          *** Methode ***;
          Doku="======================================================================= \
          Von IHapticAction geerbte Methoden=======================================================================......................................................................./ \
          @brief\tRegistriert die Aktion für eine Shape bei HLAPI./ @param\tshapeID\tID \
          der Shape, für die die Aktion registriert werden soll........................................................................";
          Name="unregisterAction";
          ID=117;
          IsVirtual=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="shapeID";
            ID=118;
            Typ="HLuint";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tDestruktor: Gibt die Resourcen des Objektes frei........................................................................";
          Name="~DragNodeOnGridHandler";
          ID=119;
          IsVirtual=true;
        };
        {
          *** Aggregation ***;
          Doku="......................................................................./ \
          @brief\tDer Node, dem der Eventhandler zugeordnet ist........................................................................";
          ID=120;
          Datentyp="Node *";
          Zugriff=1;
          A=87;
          B=291;
          RollenName="m_pDragObj";
        };
        {
          *** Aggregation ***;
          Doku="......................................................................./ \
          @brief\tDas Grid, auf dem der Node verschoben werden soll........................................................................";
          ID=121;
          Datentyp="Grid *";
          Zugriff=1;
          A=87;
          B=195;
          RollenName="m_pGrid";
        };
        {
          *** Vererbung ***;
          Stereotype="implements";
          ID=122;
          A=87;
          B=281;
          BasisKlasse="IHapticAction";
        };
      };
      {
        *** Klasse ***;
        Doku=".............................................................................../ \
        @brief\tEine Eventhandlerklasse die es ermöglicht, haptische Objekte mit \
        dem /\t\t\tPhantom zu bewegen/\t\t\t/\t\t\tDer Eventhandler reagiert auf \
        die folgende Events:/\t\t\t- der vordere Phantom-Button wird gedrückt, \
        wenn ein Objekt mit dem /\t\t\t  Phantom berührt wird/\t\t\t- das Phantom \
        wird mit gedrücktem Button bewegt/\t\t\t- der vordere Phantom-Button wird \
        losgelassen/\t\t\tWirkung: Solange der Button gedrückt gehalten wird, folgt \
        das /\t\t\tregistrierte Objekt der Bewegung des Phantom/ @todo\tObjekte \
        lassen sich noch nicht nach hinten verschieben...............................................................................";
        Name="DragObjectHandler";
        ID=123;
        Datentyp="class";
        Zugriff=3;
        KomponentenId=-1;
        FileName="genSource\\DragObjectHandler.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\DragObjectHandler.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Doku="......................................................................./ \
          Position des Proxy beim letzten Aufruf des Draghandlers/ Dient zur Berechnung \
          des Vektors um den das Objekt verschoben werden soll";
          Name="m_LastProxyPos";
          ID=124;
          Datentyp="hduVector3Dd";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tKonstruktor, initialisiert das Eventhandler-Objekt mit dem /\t\t\tzugehörigen \
          haptischen Objekt/ @param\tpObj\tPointer auf das haptische Objekt für das \
          der /\t\t\t\t\tEventhandler zuständig sein soll.......................................................................";
          Name="DragObjectHandler";
          ID=125;
          {
            *** Parameter ***;
            Name="pObj";
            ID=126;
            Typ="HapticObject *";
          };
        };
        {
          *** Methode ***;
          Doku="/ @brief\t(HLAPI-Callbackfunktion) Started das Draggen des Objekts/ \
          @param\tevent\tGibt an, auf welches HLAPI-Event hin die Callback-/\t\t\t\t\tFunktion \
          aufgerufen werden soll, hier HL_EVENT_1BUTTONDOWN/\t@param\tshapeID\tDie \
          ShapeID des Objekts, das bewegt werden soll/ @param\tthread\tGibt an, in \
          welchem HLAPI-Thread das Event behandelt /\t\t\t\t\twerden soll, in diesem \
          Fall HL_CLIENT_THREAD/ @param\tcache\tHLAPI-State Schnappschuss in dem \
          Moment, in dem das Event feuert/ @param\tpHandlerObject\tPointer auf das \
          DragObjectHandler-Objekt, das/\t\t\t\t\tdas Event verarbeiten soll.......................................................................";
          Name="OnButtonDown";
          ID=127;
          IsStatic=true;
          Zugriff=1;
          RueckgabeWert="void HLCALLBACK";
          {
            *** Parameter ***;
            Name="event";
            ID=128;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="shapeID";
            ID=129;
            Typ="HLuint";
          };
          {
            *** Parameter ***;
            Name="thread";
            ID=130;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="cache";
            ID=131;
            Typ="HLcache *";
          };
          {
            *** Parameter ***;
            Name="pHandlerObject";
            ID=132;
            Typ="void *";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\t(HLAPI-Callbackfunktion) Beendet das Draggen des Objekts/ @param\tevent\tGibt \
          an, auf welches HLAPI-Event hin die Callback-/\t\t\t\t\tFunktion aufgerufen \
          werden soll, hier HL_EVENT_1BUTTONUP/\t@param\tshapeID\thier soll HL_OBJECT_ANY \
          angegeben werden/ @param\tthread\tGibt an, in welchem HLAPI-Thread das \
          Event behandelt/\t\t\t\t\t werden soll, in diesem Fall HL_CLIENT_THREAD/ \
          @param\tcache\tHLAPI-State Schnappschuss in dem Moment, in dem das Event \
          feuert/ @param\tuserdata\tWird von dieser Funktion nicht benötigt.......................................................................";
          Name="OnButtonUp";
          ID=133;
          IsStatic=true;
          Zugriff=1;
          RueckgabeWert="void HLCALLBACK";
          {
            *** Parameter ***;
            Name="event";
            ID=134;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="shapeID";
            ID=135;
            Typ="HLuint";
          };
          {
            *** Parameter ***;
            Name="thread";
            ID=136;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="cache";
            ID=137;
            Typ="HLcache *";
          };
          {
            *** Parameter ***;
            Name="userdata";
            ID=138;
            Typ="void *";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\t(HLAPI-Callbackfunktion) Steuert das Draggen des Objekts/ @param\tevent\tGibt \
          an, auf welches HLAPI-Event hin die Callback-/\t\t\t\t\tFunktion aufgerufen \
          werden soll, hier HL_EVENT_MOTION/\t@param\tshapeID\thier soll HL_OBJECT_ANY \
          angegeben werden/ @param\tthread\tGibt an, in welchem HLAPI-Thread das \
          Event behandelt/\t\t\t\t\twerden soll, in diesem Fall HL_CLIENT_THREAD/ \
          @param\tcache\tHLAPI-State Schnappschuss in dem Moment, in dem das Event \
          feuert/ @param\tpHandlerObject\tPointer auf das DragObjectHandler-Objekt, \
          das/\t\t\t\t\t das Event verarbeiten soll.......................................................................";
          Name="OnDrag";
          ID=139;
          IsStatic=true;
          Zugriff=1;
          RueckgabeWert="void HLCALLBACK";
          {
            *** Parameter ***;
            Name="event";
            ID=140;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="shapeID";
            ID=141;
            Typ="HLuint";
          };
          {
            *** Parameter ***;
            Name="thread";
            ID=142;
            Typ="HLenum";
          };
          {
            *** Parameter ***;
            Name="cache";
            ID=143;
            Typ="HLcache *";
          };
          {
            *** Parameter ***;
            Name="pHandlerObject";
            ID=144;
            Typ="void *";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tVeranlasst das haptische Objekt, sich mit dem Proxy zu bewegen/ \
          @param\tpCache\tHLAPI-State Schnappschuss in dem Moment, in dem das Event \
          feuert.......................................................................";
          Name="handleDrag";
          ID=145;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="pCache";
            ID=146;
            Typ="HLcache *";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tNimmt die Proxy-Position beim Starten des Drag-Vorgangs auf/ @param\tpCache\tHLAPI-State \
          Schnappschuss in dem Moment, in dem das Event feuert.......................................................................";
          Name="initAction";
          ID=147;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="pCache";
            ID=148;
            Typ="HLcache *";
          };
        };
        {
          *** Methode ***;
          Doku="********************************************************************* \
          Implementierung der von IHapticAction geerbten Methoden*********************************************************************......................................................................./ \
          @brief\tRegistriert die Aktion für eine Shape bei HLAPI/ @param\tshapeID\tID \
          der Shape, für die die Aktion registriert werden soll.......................................................................";
          Name="registerAction";
          ID=149;
          IsVirtual=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="shapeID";
            ID=150;
            Typ="HLuint";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tMeldet die Aktion für eine Shape bei HLAPI ab/ @param\tshapeID\tID \
          der Shape, für die die Aktion registriert wurde.......................................................................";
          Name="unregisterAction";
          ID=151;
          IsVirtual=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="shapeID";
            ID=152;
            Typ="HLuint";
          };
        };
        {
          *** Assoziation ***;
          ID=153;
          Datentyp="HapticObject*";
          Zugriff=2;
          A=123;
          B=246;
          RollenName="m_pDragObj";
        };
        {
          *** Vererbung ***;
          Stereotype="implements";
          ID=154;
          A=123;
          B=281;
        };
      };
      {
        *** Klasse ***;
        Name="Edge";
        ID=155;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\Edge.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\Edge.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Doku="......................................................................./ \
          @brief\tID der OpenGL-Displayliste, mit der der Node gezeichnet wird........................................................................";
          Name="m_DisplayList";
          ID=156;
          Datentyp="GLuint";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_EndPosition";
          ID=157;
          Datentyp="Position";
          DatentypID=331;
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_StartPosition";
          ID=158;
          Datentyp="Position";
          DatentypID=331;
          Zugriff=1;
        };
        {
          *** Methode ***;
          Name="Edge";
          ID=159;
          {
            *** Parameter ***;
            Name="start";
            ID=160;
            Typ="Position";
            TypID=331;
          };
          {
            *** Parameter ***;
            Name="end";
            ID=161;
            Typ="Position";
            TypID=331;
          };
        };
        {
          *** Methode ***;
          Name="releaseDisplayList";
          ID=162;
          Zugriff=1;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Doku="..............................................................................................................................................\t\tvoid \
          setTexture( const Texture* value );********************************************************************* \
          Von HapticObject geerbte Methoden*********************************************************************..............................................................................................................................................";
          Name="renderShape";
          ID=163;
          IsVirtual=true;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="setEndPosition";
          ID=164;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=165;
            Typ="Position";
          };
        };
        {
          *** Methode ***;
          Name="setStartPosition";
          ID=166;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=167;
            Typ="Position";
          };
        };
        {
          *** Methode ***;
          Name="~Edge";
          ID=168;
          IsVirtual=true;
        };
        {
          *** Vererbung ***;
          ID=169;
          A=155;
          B=246;
        };
      };
      {
        *** Klasse ***;
        Name="FrictionForceEffect";
        ID=170;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\FrictionForceEffect.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\FrictionForceEffect.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Name="m_Gain";
          ID=171;
          Datentyp="double";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_Magnitude";
          ID=172;
          Datentyp="double";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Name="FrictionForceEffect";
          ID=173;
          {
            *** Parameter ***;
            Name="magnitude";
            ID=174;
            Typ="double";
            Default="0.0";
          };
          {
            *** Parameter ***;
            Name="gain";
            ID=175;
            Typ="double";
            Default="0.0";
          };
        };
        {
          *** Methode ***;
          Name="renderProperties";
          ID=176;
          IsVirtual=true;
          Zugriff=1;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="setGain";
          ID=177;
          IsVirtual=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=178;
            Typ="double";
          };
        };
        {
          *** Methode ***;
          Name="setMagnitude";
          ID=179;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=180;
            Typ="double";
          };
        };
        {
          *** Methode ***;
          Name="~FrictionForceEffect";
          ID=181;
          IsVirtual=true;
        };
        {
          *** Vererbung ***;
          ID=182;
          A=170;
          B=236;
        };
      };
      {
        *** Klasse ***;
        Name="GraphScene";
        ID=183;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\GraphScene.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\GraphScene.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Methode ***;
          Name="GraphScene";
          ID=184;
        };
        {
          *** Methode ***;
          Name="addObject";
          ID=185;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="obj";
            ID=186;
            Typ="HapticObject *";
          };
        };
        {
          *** Methode ***;
          Name="initScene";
          ID=187;
          IsVirtual=true;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="renderScene";
          ID=188;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="bHapticsEnabled";
            ID=189;
            Typ="bool";
          };
        };
        {
          *** Methode ***;
          Name="renderSceneGraphics";
          ID=190;
          Zugriff=1;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="renderSceneHaptics";
          ID=191;
          Zugriff=1;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="bHapticsEnabled";
            ID=192;
            Typ="bool";
          };
        };
        {
          *** Methode ***;
          Name="~GraphScene";
          ID=193;
          IsVirtual=true;
        };
        {
          *** Assoziation ***;
          ID=194;
          Datentyp="vector<HapticObject>";
          Zugriff=1;
          A=183;
          B=246;
          RollenName="m_SceneElements";
          KardinalitaetAnfangsKlasse="0..*";
          KardinalitaetEndeKlasse="1";
        };
      };
      {
        *** Klasse ***;
        Name="Grid";
        ID=195;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\Grid.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\Grid.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Name="m_Columns";
          ID=196;
          Datentyp="int";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Doku="......................................................................./ \
          @brief\tID der OpenGL-Displayliste, mit der der Node gezeichnet wird........................................................................";
          Name="m_DisplayList";
          ID=197;
          Datentyp="GLuint";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_Rows";
          ID=198;
          Datentyp="int";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Name="Grid";
          ID=199;
          {
            *** Parameter ***;
            Name="cols";
            ID=200;
            Typ="int";
            Default="1";
          };
          {
            *** Parameter ***;
            Name="rows";
            ID=201;
            Typ="int";
            Default="1";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tStellt fest, ob eine gegebene Position mit einem gültigen /\t\t\tGitterpunkt \
          überein stimmt (Toleranz 0.01)./ @param\tpos\tDie zu überprüfende Position./ \
          @return\ttrue, wenn pos ein gültiger Gitterpunkt ist, sonst false........................................................................";
          Name="isGridPoint";
          ID=202;
          RueckgabeWert="bool";
          {
            *** Parameter ***;
            Name="pos";
            ID=203;
            Typ="Position";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tErmittelt zu einer gegebenen Position den nächstgelegenen /\t\t\tgültigen \
          Gitterpunkt./ @param\tpos\tDie zu überprüfende Position./ @return\tPosition \
          des zu pos nächstgelegenen Gitterpunktes........................................................................";
          Name="nearestGridPoint";
          ID=204;
          RueckgabeWert="Position";
          {
            *** Parameter ***;
            Name="pos";
            ID=205;
            Typ="Position";
          };
        };
        {
          *** Methode ***;
          Name="renderDefaultGraphicProperties";
          ID=206;
          IsVirtual=true;
          Zugriff=1;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="renderShape";
          ID=207;
          IsVirtual=true;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="~Grid";
          ID=208;
          IsVirtual=true;
        };
        {
          *** Vererbung ***;
          ID=209;
          A=195;
          B=246;
        };
      };
      {
        *** Klasse ***;
        Name="HapticConstraint";
        ID=210;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\HapticConstraint.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\HapticConstraint.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Name="m_Enabled";
          ID=211;
          Datentyp="bool";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_HLConstraintID";
          ID=212;
          Datentyp="HLuint";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_SnapDistance";
          ID=213;
          Datentyp="HLfloat";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Name="HapticConstraint";
          ID=214;
          {
            *** Parameter ***;
            Name="snapDist";
            ID=215;
            Typ="HLfloat";
            Default="0.0";
          };
        };
        {
          *** Methode ***;
          Name="disable";
          ID=216;
          RueckgabeWert="bool";
        };
        {
          *** Methode ***;
          Name="enable";
          ID=217;
          RueckgabeWert="bool";
        };
        {
          *** Methode ***;
          Name="renderConstraint";
          ID=218;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="setSnapDistance";
          ID=219;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=220;
            Typ="HLfloat";
          };
        };
        {
          *** Methode ***;
          Name="~HapticConstraint";
          ID=221;
          IsVirtual=true;
        };
      };
      {
        *** Klasse ***;
        Name="HapticCursor";
        ID=222;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\HapticCursor.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\HapticCursor.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Doku="......................................................................./ \
          @brief\tSkalierungsfaktor, der je nach Projektion berechnet wird........................................................................";
          Name="m_Scale";
          ID=223;
          Datentyp="double";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Doku="......................................................................./ \
          @brief\tGröße des Cursors in Pixeln........................................................................";
          Name="m_SizePixels";
          ID=224;
          Datentyp="int";
          IsConst=true;
          Zugriff=1;
        };
        {
          *** Methode ***;
          Doku="......................................................................./.......................................................................";
          Name="HapticCursor";
          ID=225;
          {
            *** Parameter ***;
            Name="sizePix";
            ID=226;
            Typ="int";
            Default="DEFAULT_CURSOR_SIZE_PIX";
          };
        };
        {
          *** Methode ***;
          Name="render";
          ID=227;
          IsVirtual=true;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="scale";
          ID=228;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="~HapticCursor";
          ID=229;
          IsVirtual=true;
        };
      };
      {
        *** Klasse ***;
        Name="HapticDevice";
        ID=230;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\HapticDevice.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\HapticDevice.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Name="m_hHLRenderingContext";
          ID=231;
          Datentyp="HHLRC";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_hHapticDevice";
          ID=232;
          Datentyp="HHD";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Name="initialize";
          ID=233;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="isActive";
          ID=234;
          RueckgabeWert="bool";
        };
        {
          *** Methode ***;
          Name="updateWorkspace";
          ID=235;
          RueckgabeWert="void";
        };
      };
      {
        *** Klasse ***;
        Name="HapticEffect";
        ID=236;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\HapticEffect.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\HapticEffect.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Name="m_EffectID";
          ID=237;
          Datentyp="HLuint";
          IsConst=true;
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_EffectType";
          ID=238;
          Datentyp="HLenum";
          IsConst=true;
          Zugriff=1;
        };
        {
          *** Methode ***;
          Name="HapticEffect";
          ID=239;
        };
        {
          *** Methode ***;
          Name="renderProperties";
          ID=240;
          IsAbstract=true;
          IsVirtual=true;
          Zugriff=1;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="startEffect";
          ID=241;
          IsVirtual=true;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="stopEffect";
          ID=242;
          IsVirtual=true;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="triggerEffect";
          ID=243;
          IsVirtual=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Doku="Millisekunden";
            Name="duration";
            ID=244;
            Typ="double";
            Default="100.0";
          };
        };
        {
          *** Methode ***;
          Name="~HapticEffect";
          ID=245;
          IsVirtual=true;
        };
      };
      {
        *** Klasse ***;
        Name="HapticObject";
        ID=246;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\HapticObject.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\HapticObject.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Name="m_HLShapeID";
          ID=247;
          Datentyp="HLuint";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Name="HapticObject";
          ID=248;
        };
        {
          *** Methode ***;
          Name="addGraphicMaterial";
          ID=249;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="material";
            ID=250;
            Typ="IGraphicMaterial *";
          };
        };
        {
          *** Methode ***;
          Name="addHapticAction";
          ID=251;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="act";
            ID=252;
            Typ="IHapticAction *";
          };
        };
        {
          *** Methode ***;
          Name="addHapticMaterial";
          ID=253;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="material";
            ID=254;
            Typ="IHapticMaterial *";
          };
        };
        {
          *** Methode ***;
          Name="getPosition";
          ID=255;
          RueckgabeWert="Position";
          RueckgabeWertID=331;
        };
        {
          *** Methode ***;
          Name="renderDefaultGraphicProperties";
          ID=256;
          IsVirtual=true;
          Zugriff=1;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="renderDefaultHapticProperties";
          ID=257;
          IsVirtual=true;
          Zugriff=1;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="renderGraphics";
          ID=258;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="renderHaptics";
          ID=259;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="renderShape";
          ID=260;
          IsAbstract=true;
          Zugriff=1;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="setHapticConstraint";
          ID=261;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=262;
            Typ="const HapticConstraint*";
          };
        };
        {
          *** Methode ***;
          Name="~HapticObject";
          ID=263;
          IsVirtual=true;
        };
        {
          *** Assoziation ***;
          ID=264;
          Zugriff=2;
          A=246;
          B=279;
          RollenName="igraphicproperty";
        };
        {
          *** Assoziation ***;
          ID=265;
          Datentyp="vector<IGraphicProperty>";
          Zugriff=1;
          A=246;
          B=279;
          RollenName="m_graphicProperties";
          KardinalitaetAnfangsKlasse="0..*";
          KardinalitaetEndeKlasse="1";
        };
        {
          *** Assoziation ***;
          ID=266;
          Datentyp="vector<IHapticProperty>";
          Zugriff=1;
          A=246;
          B=286;
          RollenName="m_hapticProperties";
          KardinalitaetAnfangsKlasse="0..*";
          KardinalitaetEndeKlasse="1";
        };
        {
          *** Assoziation ***;
          ID=267;
          Datentyp="vector<IHapticAction>";
          Zugriff=1;
          A=246;
          B=281;
          RollenName="m_hapticActions";
          KardinalitaetAnfangsKlasse="0..*";
          KardinalitaetEndeKlasse="1";
        };
        {
          *** Assoziation ***;
          ID=268;
          Datentyp="HapticConstraint*";
          Zugriff=1;
          A=246;
          B=210;
          RollenName="m_hapticConstraint";
          KardinalitaetAnfangsKlasse="0..1";
          KardinalitaetEndeKlasse="0..1";
        };
      };
      {
        *** Klasse ***;
        Doku=".............................................................................../ \
        @brief\tAdapterklasse der eine Referenz zwischen Grafikobjekten der/\t\t\thaptischen \
        Szene und den Aufgaben herstellt./\t\t\t/\t\t\tJeder Node enthält eine \
        Referenz auf seine entsprechende/\t\t\tAufgabe um relevante Daten mit Ihr \
        auszutauschen/ @todo\tDefinition der abstrakten Adapter Methoden...............................................................................";
        Name="IBusinessAdapter";
        Stereotype="Interface";
        ID=269;
        Image="Interface";
        Datentyp="class";
        Zugriff=3;
        KomponentenId=-1;
        FileName="genSource\\IBusinessAdapter.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\IBusinessAdapter.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Methode ***;
          Doku=".............................................................................../ \
          @brief\tLiefert die Kraft, die notwendig ist, um eine Aufgabe zu verschieben//\t\t\t1 \
          = keine Kraft/\t\t\t2 = lässt sich schwer bewegen/\t\t\t3 = lässt sich \
          gar nicht bewegen/\t\t\t0 = kann nicht berechnet werden/\t\t\t-1= Fehler...............................................................................";
          Name="getForce";
          ID=270;
          IsAbstract=true;
          IsVirtual=true;
          RueckgabeWert="int";
        };
        {
          *** Methode ***;
          Name="getHeight";
          ID=271;
          IsAbstract=true;
          IsVirtual=true;
          RueckgabeWert="float";
        };
        {
          *** Methode ***;
          Name="getPosition";
          ID=272;
          IsAbstract=true;
          IsVirtual=true;
          RueckgabeWert="Position";
          RueckgabeWertID=331;
        };
        {
          *** Methode ***;
          Name="getWidth";
          ID=273;
          IsAbstract=true;
          IsVirtual=true;
          RueckgabeWert="float";
        };
        {
          *** Vererbung ***;
          ID=274;
          A=269;
          B=321;
        };
      };
      {
        *** Klasse ***;
        Name="IBusinessConverter";
        Stereotype="Interface";
        ID=275;
        Image="Interface";
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\IBusinessConverter.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\IBusinessConverter.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Methode ***;
          Name="businessToViewCoordinates";
          ID=276;
          IsAbstract=true;
          IsVirtual=true;
          RueckgabeWert="Position";
          RueckgabeWertID=331;
        };
        {
          *** Methode ***;
          Name="viewToBusinessCoordinates";
          ID=277;
          IsAbstract=true;
          IsVirtual=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="viewPosition";
            ID=278;
            Typ="Position";
            TypID=331;
          };
        };
      };
      {
        *** Klasse ***;
        Name="IGraphicMaterial";
        Stereotype="Interface";
        ID=279;
        Image="Interface";
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\GraphicalProperty.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\GraphicalProperty.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Methode ***;
          Name="renderProperty";
          ID=280;
          IsAbstract=true;
          RueckgabeWert="void";
        };
      };
      {
        *** Klasse ***;
        Name="IHapticAction";
        Stereotype="Interface";
        ID=281;
        Image="Interface";
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\HapticAction.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\HapticAction.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Methode ***;
          Name="registerAction";
          ID=282;
          IsAbstract=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="shapeID";
            ID=283;
            Typ="HLuint";
          };
        };
        {
          *** Methode ***;
          Name="unregisterAction";
          ID=284;
          IsAbstract=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="shapeID";
            ID=285;
            Typ="HLuint";
          };
        };
      };
      {
        *** Klasse ***;
        Name="IHapticMaterial";
        Stereotype="Interface";
        ID=286;
        Image="Interface";
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\HapticProperty.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\HapticProperty.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Methode ***;
          Name="renderProperty";
          ID=287;
          IsAbstract=true;
          RueckgabeWert="void";
        };
      };
      {
        *** Klasse ***;
        Doku=".............................................................................../ \
        @brief\tSchnittstelle für  das Observer-Pattern//\t\t\tKlassen, die diese \
        Schnittstelle implementieren, können sich bei /\t\t\tObservables anmelden \
        um über Änderungen informiert zu werden...............................................................................";
        Name="IObserver";
        ID=288;
        Datentyp="class";
        Zugriff=3;
        KomponentenId=-1;
        FileName="IObserver.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\IObserver.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tVeranlasst den Observer, sich die benötigten Informationen /\t\t\tvom \
          Observable zu holen.......................................................................";
          Name="Update";
          ID=289;
          IsAbstract=true;
          IsVirtual=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="pObservable";
            ID=290;
            Typ="Observable *";
          };
        };
      };
      {
        *** Klasse ***;
        Doku="class Texture;class IBusinessAdapter;.............................................................................../ \
        @author\tKatharina Greiner, Matr.-Nr. 943471//\t@brief\tHaptisches Objekt, \
        das einen Knoten in einem Graphen darstellt................................................................................";
        Name="Node";
        ID=291;
        Datentyp="class";
        Zugriff=3;
        KomponentenId=-1;
        FileName="genSource\\Node.cpp";
        HeaderFileName="genSource\\Node.h";
        Parent=-1;
        {
          *** Attribut ***;
          Doku="......................................................................./ \
          @brief\tID der OpenGL-Displayliste, mit der der Node gezeichnet wird........................................................................";
          Name="m_DisplayList";
          ID=482;
          Datentyp="GLuint";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_Height";
          ID=483;
          Datentyp="float";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_Width";
          ID=484;
          Datentyp="float";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Doku="..............................................................................................................................................";
          Name="Node";
          ID=485;
          {
            *** Parameter ***;
            Name="businessObj";
            ID=486;
            Typ="IBusinessAdapter *";
          };
        };
        {
          *** Methode ***;
          Doku="********************************************************************* \
          Von IObserver geerbte Methoden*********************************************************************......................................................................./ \
          @brief\tVeranlasst den Observer, sich die benötigten Informationen /\t\t\tvom \
          Observable zu holen........................................................................";
          Name="Update";
          ID=489;
          IsVirtual=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="pObservable";
            ID=490;
            Typ="Observable *";
          };
        };
        {
          *** Methode ***;
          Name="addIncomingEdge";
          ID=491;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="pEdge";
            ID=492;
            Typ="Edge *";
          };
        };
        {
          *** Methode ***;
          Name="addOutgoingEdge";
          ID=493;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="pEdge";
            ID=494;
            Typ="Edge *";
          };
        };
        {
          *** Methode ***;
          Name="getHeight";
          ID=495;
          RueckgabeWert="float";
        };
        {
          *** Methode ***;
          Name="getWidth";
          ID=496;
          RueckgabeWert="float";
        };
        {
          *** Methode ***;
          Name="releaseDisplayList";
          ID=497;
          Zugriff=1;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Doku="..............................................................................................................................................\t\tvoid \
          setTexture( const Texture* value );********************************************************************* \
          Von HapticObject geerbte Methoden*********************************************************************..............................................................................................................................................";
          Name="renderShape";
          ID=498;
          IsVirtual=true;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="setHardToMoveEffect";
          ID=499;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=500;
            Typ="HapticEffect*";
          };
        };
        {
          *** Methode ***;
          Name="setHeight";
          ID=501;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=502;
            Typ="float";
          };
        };
        {
          *** Methode ***;
          Name="setImpossibleToMoveEffect";
          ID=487;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=488;
            Typ="HapticEffect*";
          };
        };
        {
          *** Methode ***;
          Name="setWidth";
          ID=503;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=504;
            Typ="float";
          };
        };
        {
          *** Methode ***;
          Doku="..............................................................................................................................................";
          Name="translate";
          ID=505;
          IsVirtual=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="x";
            ID=506;
            Typ="const double";
          };
          {
            *** Parameter ***;
            Name="y";
            ID=507;
            Typ="const double";
          };
          {
            *** Parameter ***;
            Name="z";
            ID=508;
            Typ="const double";
          };
        };
        {
          *** Methode ***;
          Doku="..............................................................................................................................................";
          Name="~Node";
          ID=509;
          IsVirtual=true;
        };
        {
          *** Assoziation ***;
          ID=316;
          Datentyp="IBusinessAdapter*";
          Zugriff=1;
          A=291;
          B=269;
          RollenName="m_pBusinessObject";
        };
        {
          *** Assoziation ***;
          ID=317;
          Datentyp="list<Edge>";
          Zugriff=1;
          A=291;
          B=155;
          RollenName="m_IncomingEdges";
          KardinalitaetAnfangsKlasse="0..*";
          KardinalitaetEndeKlasse="1";
        };
        {
          *** Assoziation ***;
          ID=318;
          Datentyp="list<Edge>";
          Zugriff=1;
          A=291;
          B=155;
          RollenName="m_OutgoingEdges";
          KardinalitaetAnfangsKlasse="0..*";
          KardinalitaetEndeKlasse="1";
        };
        {
          *** Assoziation ***;
          ID=373;
          Datentyp="HapticEffect*";
          Zugriff=1;
          A=291;
          B=236;
          RollenName="m_pHardToMoveEffect";
        };
        {
          *** Assoziation ***;
          ID=439;
          Datentyp="HapticEffect*";
          Zugriff=2;
          A=291;
          B=236;
          RollenName="m_pImpossibleToMoveEffect";
        };
        {
          *** Vererbung ***;
          ID=319;
          A=291;
          B=246;
        };
        {
          *** Vererbung ***;
          Stereotype="implements";
          ID=320;
          A=291;
          B=288;
        };
      };
      {
        *** Klasse ***;
        Doku=".............................................................................../ \
        @brief\tImplementiert das Observer-Pattern//\t\t\tKlassen, die von Observable \
        erben, können Objekte, die an ihrem Zustand/\t\t\tinteressiert sind über \
        Änderungen informieren ohne eine enge Bindung /\t\t\tzu ihnen zu haben................................................................................";
        Name="Observable";
        ID=321;
        Datentyp="class";
        Zugriff=3;
        KomponentenId=-1;
        FileName="genSource\\Observable.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\Observable.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Doku="......................................................................./ \
          @brief\tListe aller angemeldeten Observer........................................................................";
          Name="m_Observers";
          ID=322;
          Datentyp="list<IObserver*>";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tRegistriert einen neuen Obersver........................................................................";
          Name="AddObserver";
          ID=323;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="pObserver";
            ID=324;
            Typ="IObserver *";
          };
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tInformiert alle Observer darüber, dass sich der Zustand des /\t\t\tObservables \
          geändert hat........................................................................";
          Name="NotifyAll";
          ID=325;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Doku="..............................................................................................................................................";
          Name="Observable";
          ID=326;
        };
        {
          *** Methode ***;
          Doku="......................................................................./ \
          @brief\tMeldet einen Observer beim Observable ab. Das Observer-Objekt/\t\t\twird \
          dabei nicht gelöscht........................................................................";
          Name="RemoveObserver";
          ID=327;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="pObserver";
            ID=328;
            Typ="IObserver *";
          };
        };
        {
          *** Methode ***;
          Name="~Observable";
          ID=329;
          IsVirtual=true;
        };
        {
          *** Assoziation ***;
          ID=330;
          Datentyp="list<IObserver>";
          Zugriff=2;
          A=321;
          B=288;
          RollenName="m_Observers";
          KardinalitaetAnfangsKlasse="0..*";
          KardinalitaetEndeKlasse="1";
        };
      };
      {
        *** Klasse ***;
        Name="Position";
        Stereotype="struct";
        ID=331;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\Utilities.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\Utilities.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Name="x";
          ID=332;
          Datentyp="double";
        };
        {
          *** Attribut ***;
          Name="y";
          ID=333;
          Datentyp="double";
        };
        {
          *** Attribut ***;
          Name="z";
          ID=334;
          Datentyp="double";
        };
        {
          *** Methode ***;
          Name="Position";
          ID=335;
          {
            *** Parameter ***;
            Name="x";
            ID=336;
            Typ="double";
            Default="0.0";
          };
          {
            *** Parameter ***;
            Name="y";
            ID=337;
            Typ="double";
            Default="0.0";
          };
          {
            *** Parameter ***;
            Name="z";
            ID=338;
            Typ="double";
            Default="0.0";
          };
        };
        {
          *** Methode ***;
          Name="~Position";
          ID=339;
          IsVirtual=true;
        };
      };
      {
        *** Klasse ***;
        Name="SpringForceEffect";
        ID=340;
        Datentyp="class";
        NameSpace="HapticEffects";
        KomponentenId=-1;
        FileName="genSource\\SpringForceEffect.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\SpringForceEffect.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Name="m_AnchorPosition";
          ID=341;
          Datentyp="hduVector3Dd";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_Gain";
          ID=342;
          Datentyp="double";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_Magnitude";
          ID=343;
          Datentyp="double";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Name="SpringForceEffect";
          ID=344;
          {
            *** Parameter ***;
            Name="magnitude";
            ID=345;
            Typ="double";
            Default="0.0";
          };
          {
            *** Parameter ***;
            Name="gain";
            ID=346;
            Typ="double";
            Default="0.0";
          };
          {
            *** Parameter ***;
            Name="anchor";
            ID=347;
            Typ="Position";
            TypID=331;
            Default="Position (0.0, 0.0, 0.0)";
          };
        };
        {
          *** Methode ***;
          Name="renderProperties";
          ID=348;
          IsVirtual=true;
          Zugriff=1;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="setAnchorPosition";
          ID=349;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="x";
            ID=350;
            Typ="double";
          };
          {
            *** Parameter ***;
            Name="y";
            ID=351;
            Typ="double";
          };
          {
            *** Parameter ***;
            Name="z";
            ID=352;
            Typ="double";
          };
        };
        {
          *** Methode ***;
          Name="setGain";
          ID=353;
          IsVirtual=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=354;
            Typ="double";
          };
        };
        {
          *** Methode ***;
          Name="setMagnitude";
          ID=355;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=356;
            Typ="double";
          };
        };
        {
          *** Methode ***;
          Name="~SpringForceEffect";
          ID=357;
          IsVirtual=true;
        };
        {
          *** Vererbung ***;
          ID=358;
          A=340;
          B=236;
        };
      };
      {
        *** Klasse ***;
        Name="Texture";
        ID=359;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\Texture.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\Texture.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
      };
      {
        *** Klasse ***;
        Name="ViscousForceEffect";
        ID=360;
        Datentyp="class";
        NameSpace="GraphFWEntwurf";
        KomponentenId=-1;
        FileName="genSource\\ViscousForceEffect.cpp";
        FileActiveLine=-1;
        HeaderFileName="genSource\\ViscousForceEffect.h";
        HeaderFileActiveLine=-1;
        Parent=-1;
        {
          *** Attribut ***;
          Name="m_Gain";
          ID=361;
          Datentyp="double";
          Zugriff=1;
        };
        {
          *** Attribut ***;
          Name="m_Magnitude";
          ID=362;
          Datentyp="double";
          Zugriff=1;
        };
        {
          *** Methode ***;
          Name="ViscousForceEffect";
          ID=363;
          {
            *** Parameter ***;
            Name="magnitude";
            ID=364;
            Typ="double";
            Default="0.0";
          };
          {
            *** Parameter ***;
            Name="gain";
            ID=365;
            Typ="double";
            Default="0.0";
          };
        };
        {
          *** Methode ***;
          Name="renderProperties";
          ID=366;
          IsVirtual=true;
          Zugriff=1;
          RueckgabeWert="void";
        };
        {
          *** Methode ***;
          Name="setGain";
          ID=367;
          IsVirtual=true;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=368;
            Typ="double";
          };
        };
        {
          *** Methode ***;
          Name="setMagnitude";
          ID=369;
          RueckgabeWert="void";
          {
            *** Parameter ***;
            Name="value";
            ID=370;
            Typ="double";
          };
        };
        {
          *** Methode ***;
          Name="~ViscousForceEffect";
          ID=371;
          IsVirtual=true;
        };
        {
          *** Vererbung ***;
          ID=372;
          A=360;
          B=236;
        };
      };
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\main.cpp";
      ActiveLine=-1;
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\genSource\\Camera.cpp";
      ActiveLine=-1;
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\genSource\\Camera.h";
      ActiveLine=-1;
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\genSource\\DragNodeOnGridHandler.cpp";
      ActiveLine=-1;
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\genSource\\DragNodeOnGridHandler.h";
      ActiveLine=-1;
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\genSource\\Edge.cpp";
      ActiveLine=-1;
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\genSource\\Edge.h";
      ActiveLine=-1;
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\genSource\\Grid.cpp";
      ActiveLine=-1;
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\genSource\\Grid.h";
      ActiveLine=-1;
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\genSource\\HapticConstraint.cpp";
      ActiveLine=-1;
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\genSource\\HapticConstraint.h";
      ActiveLine=-1;
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\genSource\\Node.cpp";
      ActiveLine=23;
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\genSource\\Node.h";
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\genSource\\SpringForceEffect.cpp";
      ActiveLine=-1;
    };
    {
      *** SourceFiles ***;
      FileName="D:\\FHW\\WS05-06\\Visualisierung\\Projekt\\Doku\\Diagramme\\genSource\\SpringForceEffect.h";
      ActiveLine=-1;
    };
  };
};
